
		TOPPERS/ATK2-SC1カーネル
		機能拡張・チューニングガイド

このドキュメントは，ATK2-SC1を，機能拡張・チューニングするための方法
（またはヒント）を説明するものである．

----------------------------------------------------------------------
TOPPERS ATK2
    Toyohashi Open Platform for Embedded Real-Time Systems
    Automotive Kernel Version 2

Copyright (C) 2011-2015 by Center for Embedded Computing Systems
            Graduate School of Information Science, Nagoya Univ., JAPAN
Copyright (C) 2011-2015 by FUJI SOFT INCORPORATED, JAPAN
Copyright (C) 2011-2013 by Spansion LLC, USA
Copyright (C) 2011-2015 by NEC Communication Systems, Ltd., JAPAN
Copyright (C) 2011-2015 by Panasonic Advanced Technology Development Co., Ltd., JAPAN
Copyright (C) 2011-2014 by Renesas Electronics Corporation, JAPAN
Copyright (C) 2011-2015 by Sunny Giken Inc., JAPAN
Copyright (C) 2011-2015 by TOSHIBA CORPORATION, JAPAN
Copyright (C) 2011-2015 by Witz Corporation
Copyright (C) 2014-2015 by AISIN COMCRUISE Co., Ltd., JAPAN
Copyright (C) 2014-2015 by eSOL Co.,Ltd., JAPAN
Copyright (C) 2014-2015 by SCSK Corporation, JAPAN

上記著作権者は，以下の (1)〜(3)の条件を満たす場合に限り，本ドキュメ
ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
(1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
    および下記の無保証規定が，そのままの形でドキュメント中に含まれて
    いること．
(2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
    を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
    ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
    りではない．
(3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
    からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
    本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
    く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

本ドキュメントは，AUTOSAR（AUTomotive Open System ARchitecture）仕様
に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するものではな
い．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利用する
者に対して，AUTOSARパートナーになることを求めている．

本ドキュメントは，無保証で提供されているものである．上記著作権者およ
びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
により直接的または間接的に生じたいかなる損害に関しても，その責任を負
わない．

$Id: tuning_memo.txt 1801 2015-03-27 06:34:43Z t_ishikawa $
----------------------------------------------------------------------

○目次

・ビットサーチ命令の使用
・タスク種別毎のTCB生成
・最適化するために型の依存部定義
・ISR1を使用しない場合の割込み処理の最適化


・ビットサーチ命令の使用

uint16 bitmap_search(uint16 bitmap)関数は，引数bitmap内の1のビットの
内，最も下位（右）のものをサーチし，そのビット番号を返す機能である．
この関数では，bitmapが16ビットであることを仮定し，uint16型としているビ
ットサーチ命令を持つプロセッサでは，ビットサーチ命令を使うように書き直
した方が効率が良い場合がある．このような場合には，ターゲット依存部でビ
ットサーチ命令を使ったbitmap_searchを定義し，OMIT_BITMAP_SEARCHをマク
ロ定義すればよい．
また，ビットサーチ命令のサーチ方向が逆などの理由で優先度とビットとの対
応を変更したい場合には，PRIMAP_BITをマクロ定義すればよい．
また，標準ライブラリにffsがあるなら，次のように定義して標準ライブラリ
を使った方が効率が良い可能性もある．

  #define	bitmap_search(bitmap) (ffs(bitmap) - 1)


・タスク種別毎にTCBを生成する

AUTOSAR仕様のタスクには，基本タスクと拡張タスクがある．基本タスクは待
ち状態に入ることはできない．拡張タスクは基本タスクの機能に加え，待ち状
態に入ることができる．
現状の実装では，基本タスクと拡張タスクを区別せず，同じTCB型で管理ブロ
ックを実装しているが，基本タスクではイベント関連のデータは必要ないため，
拡張タスクと基本タスクでTCBを変更することで，メモリ使用量を削減するこ
とが可能と考えられる．
基本タスクと拡張タスクでTCBを分けると TCBをtcb_tableという１つの配列で
管理ができなくなり，タスク管理ブロックから，タスクIDを割出す処理の考慮
が必要である．
また，tcb_tableを使っているマクロにおいて，基本タスクと拡張タスクとの
使い分けをする必要がある．シングルコアの場合，マクロの使い分けによって，
処理のオーバヘッドが増加する可能性がある．マルチコアの場合は，tcbへのポ
インタテーブルを使っているため，この実装ならオーバーヘッドの問題はない．
イベントだけコントロールブロックを分ける方法もあるが，ClearEventなど自
タスクへのイベント操作の際，TCBへのポインタから対象イベントコントロール
ブロックへの参照コストが高いと考えられる．

メリット：
  1基本タスク毎8バイトの節約が出来る 
ディメリット
  構造体定義の変更とコンフィギュレーション対応が必要
  必要に応じて，タスク管理ブロック種別を判定する処理が必要

シングルコアの関連マクロ：
#define get_tcb(tskid)	(&(tcb_table[INDEX_TSK(tskid)]))
#define	TSKID(p_tcb)	((ID)(((p_tcb) - tcb_table) + TMIN_TSKID))

マルチコアの関連マクロ：
#define get_tcb(tskid)	(p_tcb_table[(tskid)])
#define TSKID(p_tcb)	((TaskType) (((p_tcb)->p_tinib) - tinib_table))


・最適化するために型の依存部定義

以下の型は，必要な型サイズが必要なオブジェクト数など使用者に依存するた
め，依存部で再定義することができる．型を再定義することによって，実行効
率が上がり，メモリ使用量を削減する可能性があるが，場合によって，実行効
率を下がり，メモリ使用量を削減できない可能性もあるので，ターゲットのハ
ードウェア性能に合わせて，修正することが望ましい．
OMIT_DATA_TYPEマクロを定義した場合に，非依存部から下記の型定義を無効化
し，依存部で再定義する必要がる．

  typedef uint32	TimeType;           /* 時間 */
  typedef uint32	AlarmType;          /* アラームID */
  typedef uint32	ResourceType;       /* リソースID */
  typedef uint32	TaskType;           /* タスクID */
  typedef uint32	ISRType;            /* ISR ID */
  typedef uint32	CounterType;        /* カウンタID */
  typedef uint32	ScheduleTableType;  /* スケジュールテーブルID */
  typedef float32	PhysicalTimeType;   /* （ティックから時間に換算用）時間 */


・ISR1を使用しない場合の割込み処理の最適化

割込み禁止には，OS割込み禁止と全割込み禁止がある．

多くのプロセッサでは，OS割込み禁止はプロセッサの割込み優先度を用いて実
現することが多い．具体的には，システムに登録されたC2ISRの最高優先度よ
り，OS割込み禁止時の割込み優先度を計算して，CPUに設定することで実現す
る．一方，全割込み禁止は割込み禁止レベルを計算する必要がなく，CPUに設
定することが一般的であり，OS割込み禁止処理よりも実行効率が良い．

C1ISRを使用しない場合，C2ISRの最高優先度を全割込み禁止レベルまで引き上
げることが可能となり，OS割込み禁止処理を全割込み禁止処理と同じ機能で実
装することで最適化できる．

