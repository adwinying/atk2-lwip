// DE2_115_SOPC_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 182 at 2015.03.26.09:07:38

`timescale 1 ps / 1 ps
module DE2_115_SOPC_mm_interconnect_0 (
		input  wire        clk_50_clk_clk,                                         //                                       clk_50_clk.clk
		input  wire        pll_c0_clk,                                             //                                           pll_c0.clk
		input  wire        can_top_0_clock_sink_reset_reset_bridge_in_reset_reset, // can_top_0_clock_sink_reset_reset_bridge_in_reset.reset
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,                //                cpu_reset_n_reset_bridge_in_reset.reset
		input  wire [27:0] cpu_data_master_address,                                //                                  cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                            //                                                 .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                             //                                                 .byteenable
		input  wire        cpu_data_master_read,                                   //                                                 .read
		output wire [31:0] cpu_data_master_readdata,                               //                                                 .readdata
		input  wire        cpu_data_master_write,                                  //                                                 .write
		input  wire [31:0] cpu_data_master_writedata,                              //                                                 .writedata
		input  wire        cpu_data_master_debugaccess,                            //                                                 .debugaccess
		input  wire [27:0] cpu_instruction_master_address,                         //                           cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                     //                                                 .waitrequest
		input  wire [3:0]  cpu_instruction_master_burstcount,                      //                                                 .burstcount
		input  wire        cpu_instruction_master_read,                            //                                                 .read
		output wire [31:0] cpu_instruction_master_readdata,                        //                                                 .readdata
		output wire        cpu_instruction_master_readdatavalid,                   //                                                 .readdatavalid
		input  wire [31:0] sgdma_rx_descriptor_read_address,                       //                         sgdma_rx_descriptor_read.address
		output wire        sgdma_rx_descriptor_read_waitrequest,                   //                                                 .waitrequest
		input  wire        sgdma_rx_descriptor_read_read,                          //                                                 .read
		output wire [31:0] sgdma_rx_descriptor_read_readdata,                      //                                                 .readdata
		output wire        sgdma_rx_descriptor_read_readdatavalid,                 //                                                 .readdatavalid
		input  wire [31:0] sgdma_rx_descriptor_write_address,                      //                        sgdma_rx_descriptor_write.address
		output wire        sgdma_rx_descriptor_write_waitrequest,                  //                                                 .waitrequest
		input  wire        sgdma_rx_descriptor_write_write,                        //                                                 .write
		input  wire [31:0] sgdma_rx_descriptor_write_writedata,                    //                                                 .writedata
		input  wire [31:0] sgdma_rx_m_write_address,                               //                                 sgdma_rx_m_write.address
		output wire        sgdma_rx_m_write_waitrequest,                           //                                                 .waitrequest
		input  wire [3:0]  sgdma_rx_m_write_byteenable,                            //                                                 .byteenable
		input  wire        sgdma_rx_m_write_write,                                 //                                                 .write
		input  wire [31:0] sgdma_rx_m_write_writedata,                             //                                                 .writedata
		input  wire [31:0] sgdma_tx_descriptor_read_address,                       //                         sgdma_tx_descriptor_read.address
		output wire        sgdma_tx_descriptor_read_waitrequest,                   //                                                 .waitrequest
		input  wire        sgdma_tx_descriptor_read_read,                          //                                                 .read
		output wire [31:0] sgdma_tx_descriptor_read_readdata,                      //                                                 .readdata
		output wire        sgdma_tx_descriptor_read_readdatavalid,                 //                                                 .readdatavalid
		input  wire [31:0] sgdma_tx_descriptor_write_address,                      //                        sgdma_tx_descriptor_write.address
		output wire        sgdma_tx_descriptor_write_waitrequest,                  //                                                 .waitrequest
		input  wire        sgdma_tx_descriptor_write_write,                        //                                                 .write
		input  wire [31:0] sgdma_tx_descriptor_write_writedata,                    //                                                 .writedata
		input  wire [31:0] sgdma_tx_m_read_address,                                //                                  sgdma_tx_m_read.address
		output wire        sgdma_tx_m_read_waitrequest,                            //                                                 .waitrequest
		input  wire        sgdma_tx_m_read_read,                                   //                                                 .read
		output wire [31:0] sgdma_tx_m_read_readdata,                               //                                                 .readdata
		output wire        sgdma_tx_m_read_readdatavalid,                          //                                                 .readdatavalid
		output wire [2:0]  audio_avalon_slave_address,                             //                               audio_avalon_slave.address
		output wire        audio_avalon_slave_write,                               //                                                 .write
		output wire        audio_avalon_slave_read,                                //                                                 .read
		input  wire [15:0] audio_avalon_slave_readdata,                            //                                                 .readdata
		output wire [15:0] audio_avalon_slave_writedata,                           //                                                 .writedata
		output wire [7:0]  can_top_0_avalon_slave_0_address,                       //                         can_top_0_avalon_slave_0.address
		output wire        can_top_0_avalon_slave_0_write,                         //                                                 .write
		input  wire [31:0] can_top_0_avalon_slave_0_readdata,                      //                                                 .readdata
		output wire [31:0] can_top_0_avalon_slave_0_writedata,                     //                                                 .writedata
		output wire        can_top_0_avalon_slave_0_chipselect,                    //                                                 .chipselect
		output wire [22:0] cfi_flash_uas_address,                                  //                                    cfi_flash_uas.address
		output wire        cfi_flash_uas_write,                                    //                                                 .write
		output wire        cfi_flash_uas_read,                                     //                                                 .read
		input  wire [7:0]  cfi_flash_uas_readdata,                                 //                                                 .readdata
		output wire [7:0]  cfi_flash_uas_writedata,                                //                                                 .writedata
		output wire [0:0]  cfi_flash_uas_burstcount,                               //                                                 .burstcount
		output wire [0:0]  cfi_flash_uas_byteenable,                               //                                                 .byteenable
		input  wire        cfi_flash_uas_readdatavalid,                            //                                                 .readdatavalid
		input  wire        cfi_flash_uas_waitrequest,                              //                                                 .waitrequest
		output wire        cfi_flash_uas_lock,                                     //                                                 .lock
		output wire        cfi_flash_uas_debugaccess,                              //                                                 .debugaccess
		output wire [10:0] clock_crossing_io_s0_address,                           //                             clock_crossing_io_s0.address
		output wire        clock_crossing_io_s0_write,                             //                                                 .write
		output wire        clock_crossing_io_s0_read,                              //                                                 .read
		input  wire [31:0] clock_crossing_io_s0_readdata,                          //                                                 .readdata
		output wire [31:0] clock_crossing_io_s0_writedata,                         //                                                 .writedata
		output wire [0:0]  clock_crossing_io_s0_burstcount,                        //                                                 .burstcount
		output wire [3:0]  clock_crossing_io_s0_byteenable,                        //                                                 .byteenable
		input  wire        clock_crossing_io_s0_readdatavalid,                     //                                                 .readdatavalid
		input  wire        clock_crossing_io_s0_waitrequest,                       //                                                 .waitrequest
		output wire        clock_crossing_io_s0_debugaccess,                       //                                                 .debugaccess
		output wire [8:0]  cpu_jtag_debug_module_address,                          //                            cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                            //                                                 .write
		output wire        cpu_jtag_debug_module_read,                             //                                                 .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                         //                                                 .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,                        //                                                 .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,                       //                                                 .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,                      //                                                 .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,                      //                                                 .debugaccess
		output wire [9:0]  descriptor_memory_s1_address,                           //                             descriptor_memory_s1.address
		output wire        descriptor_memory_s1_write,                             //                                                 .write
		input  wire [31:0] descriptor_memory_s1_readdata,                          //                                                 .readdata
		output wire [31:0] descriptor_memory_s1_writedata,                         //                                                 .writedata
		output wire [3:0]  descriptor_memory_s1_byteenable,                        //                                                 .byteenable
		output wire        descriptor_memory_s1_chipselect,                        //                                                 .chipselect
		output wire        descriptor_memory_s1_clken,                             //                                                 .clken
		output wire [14:0] onchip_memory2_s1_address,                              //                                onchip_memory2_s1.address
		output wire        onchip_memory2_s1_write,                                //                                                 .write
		input  wire [31:0] onchip_memory2_s1_readdata,                             //                                                 .readdata
		output wire [31:0] onchip_memory2_s1_writedata,                            //                                                 .writedata
		output wire [3:0]  onchip_memory2_s1_byteenable,                           //                                                 .byteenable
		output wire        onchip_memory2_s1_chipselect,                           //                                                 .chipselect
		output wire        onchip_memory2_s1_clken,                                //                                                 .clken
		output wire [22:0] sdram_s1_address,                                       //                                         sdram_s1.address
		output wire        sdram_s1_write,                                         //                                                 .write
		output wire        sdram_s1_read,                                          //                                                 .read
		input  wire [31:0] sdram_s1_readdata,                                      //                                                 .readdata
		output wire [31:0] sdram_s1_writedata,                                     //                                                 .writedata
		output wire [3:0]  sdram_s1_byteenable,                                    //                                                 .byteenable
		input  wire        sdram_s1_readdatavalid,                                 //                                                 .readdatavalid
		input  wire        sdram_s1_waitrequest,                                   //                                                 .waitrequest
		output wire        sdram_s1_chipselect,                                    //                                                 .chipselect
		output wire [3:0]  sgdma_rx_csr_address,                                   //                                     sgdma_rx_csr.address
		output wire        sgdma_rx_csr_write,                                     //                                                 .write
		output wire        sgdma_rx_csr_read,                                      //                                                 .read
		input  wire [31:0] sgdma_rx_csr_readdata,                                  //                                                 .readdata
		output wire [31:0] sgdma_rx_csr_writedata,                                 //                                                 .writedata
		output wire        sgdma_rx_csr_chipselect,                                //                                                 .chipselect
		output wire [3:0]  sgdma_tx_csr_address,                                   //                                     sgdma_tx_csr.address
		output wire        sgdma_tx_csr_write,                                     //                                                 .write
		output wire        sgdma_tx_csr_read,                                      //                                                 .read
		input  wire [31:0] sgdma_tx_csr_readdata,                                  //                                                 .readdata
		output wire [31:0] sgdma_tx_csr_writedata,                                 //                                                 .writedata
		output wire        sgdma_tx_csr_chipselect,                                //                                                 .chipselect
		output wire [1:0]  sma_in_s1_address,                                      //                                        sma_in_s1.address
		input  wire [31:0] sma_in_s1_readdata,                                     //                                                 .readdata
		output wire [1:0]  sma_out_s1_address,                                     //                                       sma_out_s1.address
		output wire        sma_out_s1_write,                                       //                                                 .write
		input  wire [31:0] sma_out_s1_readdata,                                    //                                                 .readdata
		output wire [31:0] sma_out_s1_writedata,                                   //                                                 .writedata
		output wire        sma_out_s1_chipselect,                                  //                                                 .chipselect
		output wire [19:0] sram_avalon_slave_address,                              //                                sram_avalon_slave.address
		output wire        sram_avalon_slave_write,                                //                                                 .write
		output wire        sram_avalon_slave_read,                                 //                                                 .read
		input  wire [15:0] sram_avalon_slave_readdata,                             //                                                 .readdata
		output wire [15:0] sram_avalon_slave_writedata,                            //                                                 .writedata
		output wire [1:0]  sram_avalon_slave_byteenable,                           //                                                 .byteenable
		output wire        sram_avalon_slave_chipselect,                           //                                                 .chipselect
		output wire [7:0]  tse_control_port_address,                               //                                 tse_control_port.address
		output wire        tse_control_port_write,                                 //                                                 .write
		output wire        tse_control_port_read,                                  //                                                 .read
		input  wire [31:0] tse_control_port_readdata,                              //                                                 .readdata
		output wire [31:0] tse_control_port_writedata,                             //                                                 .writedata
		input  wire        tse_control_port_waitrequest,                           //                                                 .waitrequest
		output wire [2:0]  uart_0_s1_address,                                      //                                        uart_0_s1.address
		output wire        uart_0_s1_write,                                        //                                                 .write
		output wire        uart_0_s1_read,                                         //                                                 .read
		input  wire [15:0] uart_0_s1_readdata,                                     //                                                 .readdata
		output wire [15:0] uart_0_s1_writedata,                                    //                                                 .writedata
		output wire        uart_0_s1_begintransfer,                                //                                                 .begintransfer
		output wire        uart_0_s1_chipselect,                                   //                                                 .chipselect
		output wire [2:0]  uart_1_s1_address,                                      //                                        uart_1_s1.address
		output wire        uart_1_s1_write,                                        //                                                 .write
		output wire        uart_1_s1_read,                                         //                                                 .read
		input  wire [15:0] uart_1_s1_readdata,                                     //                                                 .readdata
		output wire [15:0] uart_1_s1_writedata,                                    //                                                 .writedata
		output wire        uart_1_s1_begintransfer,                                //                                                 .begintransfer
		output wire        uart_1_s1_chipselect,                                   //                                                 .chipselect
		output wire [0:0]  usb_dc_address,                                         //                                           usb_dc.address
		output wire        usb_dc_write,                                           //                                                 .write
		output wire        usb_dc_read,                                            //                                                 .read
		input  wire [15:0] usb_dc_readdata,                                        //                                                 .readdata
		output wire [15:0] usb_dc_writedata,                                       //                                                 .writedata
		output wire        usb_dc_chipselect,                                      //                                                 .chipselect
		output wire [0:0]  usb_hc_address,                                         //                                           usb_hc.address
		output wire        usb_hc_write,                                           //                                                 .write
		output wire        usb_hc_read,                                            //                                                 .read
		input  wire [15:0] usb_hc_readdata,                                        //                                                 .readdata
		output wire [15:0] usb_hc_writedata,                                       //                                                 .writedata
		output wire        usb_hc_chipselect,                                      //                                                 .chipselect
		output wire [7:0]  vic_0_csr_access_address,                               //                                 vic_0_csr_access.address
		output wire        vic_0_csr_access_write,                                 //                                                 .write
		output wire        vic_0_csr_access_read,                                  //                                                 .read
		input  wire [31:0] vic_0_csr_access_readdata,                              //                                                 .readdata
		output wire [31:0] vic_0_csr_access_writedata                              //                                                 .writedata
	);

	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                       // cpu_instruction_master_translator_avalon_universal_master_0_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire    [5:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                        // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                         // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                           // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                              // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                             // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_write
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                              // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                          // cpu_instruction_master_translator_avalon_universal_master_0_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                       // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                        // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                     // cpu_instruction_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                              // cpu_data_master_translator_avalon_universal_master_0_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                               // cpu_data_master_translator:uav_burstcount -> cpu_data_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                                // cpu_data_master_translator:uav_writedata -> cpu_data_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;                                  // cpu_data_master_translator:uav_address -> cpu_data_master_translator_avalon_universal_master_0_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                     // cpu_data_master_translator:uav_lock -> cpu_data_master_translator_avalon_universal_master_0_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                    // cpu_data_master_translator:uav_write -> cpu_data_master_translator_avalon_universal_master_0_agent:av_write
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                     // cpu_data_master_translator:uav_read -> cpu_data_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                                 // cpu_data_master_translator_avalon_universal_master_0_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                              // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                               // cpu_data_master_translator:uav_byteenable -> cpu_data_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                            // cpu_data_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_001_src_endofpacket;                                                              // rsp_xbar_mux_001:src_endofpacket -> cpu_data_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                    // rsp_xbar_mux_001:src_valid -> cpu_data_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                            // rsp_xbar_mux_001:src_startofpacket -> cpu_data_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_001_src_data;                                                                     // rsp_xbar_mux_001:src_data -> cpu_data_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_001_src_channel;                                                                  // rsp_xbar_mux_001:src_channel -> cpu_data_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                    // cpu_data_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest;                     // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_rx_descriptor_read_translator:uav_waitrequest
	wire    [2:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount;                      // sgdma_rx_descriptor_read_translator:uav_burstcount -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata;                       // sgdma_rx_descriptor_read_translator:uav_writedata -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address;                         // sgdma_rx_descriptor_read_translator:uav_address -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock;                            // sgdma_rx_descriptor_read_translator:uav_lock -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write;                           // sgdma_rx_descriptor_read_translator:uav_write -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read;                            // sgdma_rx_descriptor_read_translator:uav_read -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata;                        // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_rx_descriptor_read_translator:uav_readdata
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess;                     // sgdma_rx_descriptor_read_translator:uav_debugaccess -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable;                      // sgdma_rx_descriptor_read_translator:uav_byteenable -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;                   // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_rx_descriptor_read_translator:uav_readdatavalid
	wire          rsp_xbar_mux_002_src_endofpacket;                                                              // rsp_xbar_mux_002:src_endofpacket -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                    // rsp_xbar_mux_002:src_valid -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                            // rsp_xbar_mux_002:src_startofpacket -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_002_src_data;                                                                     // rsp_xbar_mux_002:src_data -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_002_src_channel;                                                                  // rsp_xbar_mux_002:src_channel -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                    // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest;                    // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_rx_descriptor_write_translator:uav_waitrequest
	wire    [2:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount;                     // sgdma_rx_descriptor_write_translator:uav_burstcount -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata;                      // sgdma_rx_descriptor_write_translator:uav_writedata -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address;                        // sgdma_rx_descriptor_write_translator:uav_address -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock;                           // sgdma_rx_descriptor_write_translator:uav_lock -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write;                          // sgdma_rx_descriptor_write_translator:uav_write -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read;                           // sgdma_rx_descriptor_write_translator:uav_read -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata;                       // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_rx_descriptor_write_translator:uav_readdata
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess;                    // sgdma_rx_descriptor_write_translator:uav_debugaccess -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable;                     // sgdma_rx_descriptor_write_translator:uav_byteenable -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;                  // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_rx_descriptor_write_translator:uav_readdatavalid
	wire          rsp_xbar_mux_003_src_endofpacket;                                                              // rsp_xbar_mux_003:src_endofpacket -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_003_src_valid;                                                                    // rsp_xbar_mux_003:src_valid -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_003_src_startofpacket;                                                            // rsp_xbar_mux_003:src_startofpacket -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_003_src_data;                                                                     // rsp_xbar_mux_003:src_data -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_003_src_channel;                                                                  // rsp_xbar_mux_003:src_channel -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_003_src_ready;                                                                    // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_003:src_ready
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest;                     // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_tx_descriptor_read_translator:uav_waitrequest
	wire    [2:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount;                      // sgdma_tx_descriptor_read_translator:uav_burstcount -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata;                       // sgdma_tx_descriptor_read_translator:uav_writedata -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address;                         // sgdma_tx_descriptor_read_translator:uav_address -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock;                            // sgdma_tx_descriptor_read_translator:uav_lock -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write;                           // sgdma_tx_descriptor_read_translator:uav_write -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read;                            // sgdma_tx_descriptor_read_translator:uav_read -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata;                        // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_tx_descriptor_read_translator:uav_readdata
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess;                     // sgdma_tx_descriptor_read_translator:uav_debugaccess -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable;                      // sgdma_tx_descriptor_read_translator:uav_byteenable -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;                   // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_tx_descriptor_read_translator:uav_readdatavalid
	wire          rsp_xbar_mux_004_src_endofpacket;                                                              // rsp_xbar_mux_004:src_endofpacket -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_004_src_valid;                                                                    // rsp_xbar_mux_004:src_valid -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_004_src_startofpacket;                                                            // rsp_xbar_mux_004:src_startofpacket -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_004_src_data;                                                                     // rsp_xbar_mux_004:src_data -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_004_src_channel;                                                                  // rsp_xbar_mux_004:src_channel -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_004_src_ready;                                                                    // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_004:src_ready
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest;                    // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_tx_descriptor_write_translator:uav_waitrequest
	wire    [2:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount;                     // sgdma_tx_descriptor_write_translator:uav_burstcount -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata;                      // sgdma_tx_descriptor_write_translator:uav_writedata -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address;                        // sgdma_tx_descriptor_write_translator:uav_address -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock;                           // sgdma_tx_descriptor_write_translator:uav_lock -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write;                          // sgdma_tx_descriptor_write_translator:uav_write -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read;                           // sgdma_tx_descriptor_write_translator:uav_read -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata;                       // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_tx_descriptor_write_translator:uav_readdata
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess;                    // sgdma_tx_descriptor_write_translator:uav_debugaccess -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable;                     // sgdma_tx_descriptor_write_translator:uav_byteenable -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;                  // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_tx_descriptor_write_translator:uav_readdatavalid
	wire          rsp_xbar_mux_005_src_endofpacket;                                                              // rsp_xbar_mux_005:src_endofpacket -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_005_src_valid;                                                                    // rsp_xbar_mux_005:src_valid -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_005_src_startofpacket;                                                            // rsp_xbar_mux_005:src_startofpacket -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_005_src_data;                                                                     // rsp_xbar_mux_005:src_data -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_005_src_channel;                                                                  // rsp_xbar_mux_005:src_channel -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_005_src_ready;                                                                    // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_005:src_ready
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest;                             // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_rx_m_write_translator:uav_waitrequest
	wire    [2:0] sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount;                              // sgdma_rx_m_write_translator:uav_burstcount -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_writedata;                               // sgdma_rx_m_write_translator:uav_writedata -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_address;                                 // sgdma_rx_m_write_translator:uav_address -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_lock;                                    // sgdma_rx_m_write_translator:uav_lock -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_write;                                   // sgdma_rx_m_write_translator:uav_write -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_read;                                    // sgdma_rx_m_write_translator:uav_read -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_readdata;                                // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_rx_m_write_translator:uav_readdata
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess;                             // sgdma_rx_m_write_translator:uav_debugaccess -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable;                              // sgdma_rx_m_write_translator:uav_byteenable -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid;                           // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_rx_m_write_translator:uav_readdatavalid
	wire          rsp_xbar_mux_006_src_endofpacket;                                                              // rsp_xbar_mux_006:src_endofpacket -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_006_src_valid;                                                                    // rsp_xbar_mux_006:src_valid -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_006_src_startofpacket;                                                            // rsp_xbar_mux_006:src_startofpacket -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_006_src_data;                                                                     // rsp_xbar_mux_006:src_data -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_006_src_channel;                                                                  // rsp_xbar_mux_006:src_channel -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_006_src_ready;                                                                    // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_006:src_ready
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest;                              // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_tx_m_read_translator:uav_waitrequest
	wire    [2:0] sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount;                               // sgdma_tx_m_read_translator:uav_burstcount -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_writedata;                                // sgdma_tx_m_read_translator:uav_writedata -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_address;                                  // sgdma_tx_m_read_translator:uav_address -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_lock;                                     // sgdma_tx_m_read_translator:uav_lock -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_write;                                    // sgdma_tx_m_read_translator:uav_write -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_read;                                     // sgdma_tx_m_read_translator:uav_read -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_readdata;                                 // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_tx_m_read_translator:uav_readdata
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess;                              // sgdma_tx_m_read_translator:uav_debugaccess -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable;                               // sgdma_tx_m_read_translator:uav_byteenable -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid;                            // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_tx_m_read_translator:uav_readdatavalid
	wire          rsp_xbar_mux_007_src_endofpacket;                                                              // rsp_xbar_mux_007:src_endofpacket -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_007_src_valid;                                                                    // rsp_xbar_mux_007:src_valid -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_007_src_startofpacket;                                                            // rsp_xbar_mux_007:src_startofpacket -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] rsp_xbar_mux_007_src_data;                                                                     // rsp_xbar_mux_007:src_data -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] rsp_xbar_mux_007_src_channel;                                                                  // rsp_xbar_mux_007:src_channel -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_007_src_ready;                                                                    // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_007:src_ready
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest;                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount;                 // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata;                  // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire   [31:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address;                    // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write;                      // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock;                       // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read;                       // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire   [31:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata;                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid;              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess;                // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable;                 // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;         // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid;               // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_valid -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;       // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data;                // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_data -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready;               // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;      // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;            // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;    // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;             // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;            // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_ready -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;          // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;           // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;          // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                             // sdram_s1_translator:uav_waitrequest -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                              // sdram_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                               // sdram_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_address;                                 // sdram_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_write;                                   // sdram_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                // sdram_s1_translator:uav_readdata -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                           // sdram_s1_translator:uav_readdatavalid -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                             // sdram_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [3:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                              // sdram_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                      // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                            // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                    // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                             // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                            // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                   // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                         // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                 // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                          // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                         // sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                        // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                    // sram_avalon_slave_translator:uav_waitrequest -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [1:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                     // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> sram_avalon_slave_translator:uav_burstcount
	wire   [15:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                      // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> sram_avalon_slave_translator:uav_writedata
	wire   [31:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address;                        // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_address -> sram_avalon_slave_translator:uav_address
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write;                          // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_write -> sram_avalon_slave_translator:uav_write
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock;                           // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_lock -> sram_avalon_slave_translator:uav_lock
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read;                           // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_read -> sram_avalon_slave_translator:uav_read
	wire   [15:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                       // sram_avalon_slave_translator:uav_readdata -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                  // sram_avalon_slave_translator:uav_readdatavalid -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                    // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sram_avalon_slave_translator:uav_debugaccess
	wire    [1:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                     // sram_avalon_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> sram_avalon_slave_translator:uav_byteenable
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;             // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;                   // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;           // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [100:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                    // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;                   // sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;          // sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                // sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;        // sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [100:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                 // sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;              // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;               // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;              // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                    // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                     // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire   [31:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                      // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire   [31:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_address;                        // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_write;                          // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_lock;                           // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_read;                           // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire   [31:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                       // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                  // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                    // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire    [3:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                     // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;             // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                   // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;           // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                    // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                   // onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;          // onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                // onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;        // onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                 // onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;              // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;               // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;              // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // cfi_flash_uas_translator:uav_waitrequest -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [0:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_burstcount -> cfi_flash_uas_translator:uav_burstcount
	wire    [7:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_writedata;                          // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_writedata -> cfi_flash_uas_translator:uav_writedata
	wire   [31:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_address;                            // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_address -> cfi_flash_uas_translator:uav_address
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_write;                              // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_write -> cfi_flash_uas_translator:uav_write
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_lock;                               // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_lock -> cfi_flash_uas_translator:uav_lock
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_read;                               // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_read -> cfi_flash_uas_translator:uav_read
	wire    [7:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdata;                           // cfi_flash_uas_translator:uav_readdata -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // cfi_flash_uas_translator:uav_readdatavalid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_debugaccess -> cfi_flash_uas_translator:uav_debugaccess
	wire    [0:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // cfi_flash_uas_translator_avalon_universal_slave_0_agent:m0_byteenable -> cfi_flash_uas_translator:uav_byteenable
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_source_valid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire   [91:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_data;                        // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_source_data -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire   [91:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rf_sink_ready -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire    [9:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                  // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                   // cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                  // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // sma_in_s1_translator:uav_waitrequest -> sma_in_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sma_in_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sma_in_s1_translator:uav_burstcount
	wire   [31:0] sma_in_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sma_in_s1_translator:uav_writedata
	wire   [31:0] sma_in_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_address -> sma_in_s1_translator:uav_address
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_write -> sma_in_s1_translator:uav_write
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sma_in_s1_translator:uav_lock
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_read -> sma_in_s1_translator:uav_read
	wire   [31:0] sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // sma_in_s1_translator:uav_readdata -> sma_in_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // sma_in_s1_translator:uav_readdatavalid -> sma_in_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sma_in_s1_translator:uav_debugaccess
	wire    [3:0] sma_in_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // sma_in_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sma_in_s1_translator:uav_byteenable
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // sma_in_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // sma_in_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // sma_in_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // sma_in_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sma_in_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sma_in_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sma_in_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // sma_in_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sma_in_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_005_src_endofpacket;                                                              // cmd_xbar_mux_005:src_endofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                    // cmd_xbar_mux_005:src_valid -> sma_in_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                            // cmd_xbar_mux_005:src_startofpacket -> sma_in_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_005_src_data;                                                                     // cmd_xbar_mux_005:src_data -> sma_in_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_005_src_channel;                                                                  // cmd_xbar_mux_005:src_channel -> sma_in_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                    // sma_in_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_005:src_ready
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                           // sma_out_s1_translator:uav_waitrequest -> sma_out_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sma_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                            // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sma_out_s1_translator:uav_burstcount
	wire   [31:0] sma_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                             // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sma_out_s1_translator:uav_writedata
	wire   [31:0] sma_out_s1_translator_avalon_universal_slave_0_agent_m0_address;                               // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_address -> sma_out_s1_translator:uav_address
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_write;                                 // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_write -> sma_out_s1_translator:uav_write
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                  // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sma_out_s1_translator:uav_lock
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_read;                                  // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_read -> sma_out_s1_translator:uav_read
	wire   [31:0] sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                              // sma_out_s1_translator:uav_readdata -> sma_out_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                         // sma_out_s1_translator:uav_readdatavalid -> sma_out_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                           // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sma_out_s1_translator:uav_debugaccess
	wire    [3:0] sma_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                            // sma_out_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sma_out_s1_translator:uav_byteenable
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                    // sma_out_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                          // sma_out_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                  // sma_out_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                           // sma_out_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                          // sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sma_out_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                 // sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                       // sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sma_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;               // sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                        // sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sma_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                       // sma_out_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                     // sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                      // sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                     // sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sma_out_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_006_src_endofpacket;                                                              // cmd_xbar_mux_006:src_endofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                    // cmd_xbar_mux_006:src_valid -> sma_out_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                            // cmd_xbar_mux_006:src_startofpacket -> sma_out_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_006_src_data;                                                                     // cmd_xbar_mux_006:src_data -> sma_out_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_006_src_channel;                                                                  // cmd_xbar_mux_006:src_channel -> sma_out_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                    // sma_out_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_006:src_ready
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // audio_avalon_slave_translator:uav_waitrequest -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> audio_avalon_slave_translator:uav_burstcount
	wire   [31:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                     // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> audio_avalon_slave_translator:uav_writedata
	wire   [31:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address;                       // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_address -> audio_avalon_slave_translator:uav_address
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write;                         // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_write -> audio_avalon_slave_translator:uav_write
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock;                          // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_lock -> audio_avalon_slave_translator:uav_lock
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read;                          // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_read -> audio_avalon_slave_translator:uav_read
	wire   [31:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                      // audio_avalon_slave_translator:uav_readdata -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // audio_avalon_slave_translator:uav_readdatavalid -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> audio_avalon_slave_translator:uav_debugaccess
	wire    [3:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // audio_avalon_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> audio_avalon_slave_translator:uav_byteenable
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                   // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_007_src_endofpacket;                                                              // cmd_xbar_mux_007:src_endofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                    // cmd_xbar_mux_007:src_valid -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                            // cmd_xbar_mux_007:src_startofpacket -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_007_src_data;                                                                     // cmd_xbar_mux_007:src_data -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_007_src_channel;                                                                  // cmd_xbar_mux_007:src_channel -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                    // audio_avalon_slave_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_007:src_ready
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // usb_hc_translator:uav_waitrequest -> usb_hc_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] usb_hc_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // usb_hc_translator_avalon_universal_slave_0_agent:m0_burstcount -> usb_hc_translator:uav_burstcount
	wire   [31:0] usb_hc_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // usb_hc_translator_avalon_universal_slave_0_agent:m0_writedata -> usb_hc_translator:uav_writedata
	wire   [31:0] usb_hc_translator_avalon_universal_slave_0_agent_m0_address;                                   // usb_hc_translator_avalon_universal_slave_0_agent:m0_address -> usb_hc_translator:uav_address
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_write;                                     // usb_hc_translator_avalon_universal_slave_0_agent:m0_write -> usb_hc_translator:uav_write
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_lock;                                      // usb_hc_translator_avalon_universal_slave_0_agent:m0_lock -> usb_hc_translator:uav_lock
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_read;                                      // usb_hc_translator_avalon_universal_slave_0_agent:m0_read -> usb_hc_translator:uav_read
	wire   [31:0] usb_hc_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // usb_hc_translator:uav_readdata -> usb_hc_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // usb_hc_translator:uav_readdatavalid -> usb_hc_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          usb_hc_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // usb_hc_translator_avalon_universal_slave_0_agent:m0_debugaccess -> usb_hc_translator:uav_debugaccess
	wire    [3:0] usb_hc_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // usb_hc_translator_avalon_universal_slave_0_agent:m0_byteenable -> usb_hc_translator:uav_byteenable
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // usb_hc_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // usb_hc_translator_avalon_universal_slave_0_agent:rf_source_valid -> usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // usb_hc_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] usb_hc_translator_avalon_universal_slave_0_agent_rf_source_data;                               // usb_hc_translator_avalon_universal_slave_0_agent:rf_source_data -> usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> usb_hc_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> usb_hc_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> usb_hc_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> usb_hc_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> usb_hc_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // usb_hc_translator_avalon_universal_slave_0_agent:rf_sink_ready -> usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> usb_hc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_008_src_endofpacket;                                                              // cmd_xbar_mux_008:src_endofpacket -> usb_hc_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                    // cmd_xbar_mux_008:src_valid -> usb_hc_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                            // cmd_xbar_mux_008:src_startofpacket -> usb_hc_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_008_src_data;                                                                     // cmd_xbar_mux_008:src_data -> usb_hc_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_008_src_channel;                                                                  // cmd_xbar_mux_008:src_channel -> usb_hc_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                    // usb_hc_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_008:src_ready
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // usb_dc_translator:uav_waitrequest -> usb_dc_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] usb_dc_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // usb_dc_translator_avalon_universal_slave_0_agent:m0_burstcount -> usb_dc_translator:uav_burstcount
	wire   [31:0] usb_dc_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // usb_dc_translator_avalon_universal_slave_0_agent:m0_writedata -> usb_dc_translator:uav_writedata
	wire   [31:0] usb_dc_translator_avalon_universal_slave_0_agent_m0_address;                                   // usb_dc_translator_avalon_universal_slave_0_agent:m0_address -> usb_dc_translator:uav_address
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_write;                                     // usb_dc_translator_avalon_universal_slave_0_agent:m0_write -> usb_dc_translator:uav_write
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_lock;                                      // usb_dc_translator_avalon_universal_slave_0_agent:m0_lock -> usb_dc_translator:uav_lock
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_read;                                      // usb_dc_translator_avalon_universal_slave_0_agent:m0_read -> usb_dc_translator:uav_read
	wire   [31:0] usb_dc_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // usb_dc_translator:uav_readdata -> usb_dc_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // usb_dc_translator:uav_readdatavalid -> usb_dc_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          usb_dc_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // usb_dc_translator_avalon_universal_slave_0_agent:m0_debugaccess -> usb_dc_translator:uav_debugaccess
	wire    [3:0] usb_dc_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // usb_dc_translator_avalon_universal_slave_0_agent:m0_byteenable -> usb_dc_translator:uav_byteenable
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // usb_dc_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // usb_dc_translator_avalon_universal_slave_0_agent:rf_source_valid -> usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // usb_dc_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] usb_dc_translator_avalon_universal_slave_0_agent_rf_source_data;                               // usb_dc_translator_avalon_universal_slave_0_agent:rf_source_data -> usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> usb_dc_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> usb_dc_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> usb_dc_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> usb_dc_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> usb_dc_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // usb_dc_translator_avalon_universal_slave_0_agent:rf_sink_ready -> usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> usb_dc_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_009_src_endofpacket;                                                              // cmd_xbar_mux_009:src_endofpacket -> usb_dc_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_009_src_valid;                                                                    // cmd_xbar_mux_009:src_valid -> usb_dc_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_009_src_startofpacket;                                                            // cmd_xbar_mux_009:src_startofpacket -> usb_dc_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_009_src_data;                                                                     // cmd_xbar_mux_009:src_data -> usb_dc_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_009_src_channel;                                                                  // cmd_xbar_mux_009:src_channel -> usb_dc_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_009_src_ready;                                                                    // usb_dc_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_009:src_ready
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_waitrequest;                     // vic_0_csr_access_translator:uav_waitrequest -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_burstcount;                      // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_burstcount -> vic_0_csr_access_translator:uav_burstcount
	wire   [31:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_writedata;                       // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_writedata -> vic_0_csr_access_translator:uav_writedata
	wire   [31:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_address;                         // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_address -> vic_0_csr_access_translator:uav_address
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_write;                           // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_write -> vic_0_csr_access_translator:uav_write
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_lock;                            // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_lock -> vic_0_csr_access_translator:uav_lock
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_read;                            // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_read -> vic_0_csr_access_translator:uav_read
	wire   [31:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdata;                        // vic_0_csr_access_translator:uav_readdata -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                   // vic_0_csr_access_translator:uav_readdatavalid -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_debugaccess;                     // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_debugaccess -> vic_0_csr_access_translator:uav_debugaccess
	wire    [3:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_byteenable;                      // vic_0_csr_access_translator_avalon_universal_slave_0_agent:m0_byteenable -> vic_0_csr_access_translator:uav_byteenable
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;              // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_valid;                    // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_source_valid -> vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;            // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_data;                     // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_source_data -> vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_ready;                    // vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;           // vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                 // vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;         // vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                  // vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                 // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rf_sink_ready -> vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;               // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;               // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_010_src_endofpacket;                                                              // cmd_xbar_mux_010:src_endofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_010_src_valid;                                                                    // cmd_xbar_mux_010:src_valid -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_010_src_startofpacket;                                                            // cmd_xbar_mux_010:src_startofpacket -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_010_src_data;                                                                     // cmd_xbar_mux_010:src_data -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_010_src_channel;                                                                  // cmd_xbar_mux_010:src_channel -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_010_src_ready;                                                                    // vic_0_csr_access_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_010:src_ready
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // can_top_0_avalon_slave_0_translator:uav_waitrequest -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_burstcount -> can_top_0_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata;               // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_writedata -> can_top_0_avalon_slave_0_translator:uav_writedata
	wire   [31:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address;                 // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_address -> can_top_0_avalon_slave_0_translator:uav_address
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write;                   // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_write -> can_top_0_avalon_slave_0_translator:uav_write
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock;                    // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_lock -> can_top_0_avalon_slave_0_translator:uav_lock
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read;                    // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_read -> can_top_0_avalon_slave_0_translator:uav_read
	wire   [31:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata;                // can_top_0_avalon_slave_0_translator:uav_readdata -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // can_top_0_avalon_slave_0_translator:uav_readdatavalid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> can_top_0_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_byteenable -> can_top_0_avalon_slave_0_translator:uav_byteenable
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_valid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data;             // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_data -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          cmd_xbar_mux_011_src_endofpacket;                                                              // cmd_xbar_mux_011:src_endofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_011_src_valid;                                                                    // cmd_xbar_mux_011:src_valid -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_011_src_startofpacket;                                                            // cmd_xbar_mux_011:src_startofpacket -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_011_src_data;                                                                     // cmd_xbar_mux_011:src_data -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_011_src_channel;                                                                  // cmd_xbar_mux_011:src_channel -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_011_src_ready;                                                                    // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_011:src_ready
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] uart_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire   [31:0] uart_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire   [31:0] uart_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> uart_0_s1_translator:uav_address
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> uart_0_s1_translator:uav_write
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> uart_0_s1_translator:uav_read
	wire   [31:0] uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // uart_0_s1_translator:uav_readdata -> uart_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire    [3:0] uart_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // uart_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // uart_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // uart_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // uart_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // uart_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> uart_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> uart_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> uart_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // uart_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> uart_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_012_src_endofpacket;                                                              // cmd_xbar_mux_012:src_endofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_012_src_valid;                                                                    // cmd_xbar_mux_012:src_valid -> uart_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_012_src_startofpacket;                                                            // cmd_xbar_mux_012:src_startofpacket -> uart_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_012_src_data;                                                                     // cmd_xbar_mux_012:src_data -> uart_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_012_src_channel;                                                                  // cmd_xbar_mux_012:src_channel -> uart_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_012_src_ready;                                                                    // uart_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_012:src_ready
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // uart_1_s1_translator:uav_waitrequest -> uart_1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] uart_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> uart_1_s1_translator:uav_burstcount
	wire   [31:0] uart_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> uart_1_s1_translator:uav_writedata
	wire   [31:0] uart_1_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_address -> uart_1_s1_translator:uav_address
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_write -> uart_1_s1_translator:uav_write
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> uart_1_s1_translator:uav_lock
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_read -> uart_1_s1_translator:uav_read
	wire   [31:0] uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // uart_1_s1_translator:uav_readdata -> uart_1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // uart_1_s1_translator:uav_readdatavalid -> uart_1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> uart_1_s1_translator:uav_debugaccess
	wire    [3:0] uart_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // uart_1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> uart_1_s1_translator:uav_byteenable
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // uart_1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // uart_1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // uart_1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // uart_1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> uart_1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> uart_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> uart_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // uart_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> uart_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_013_src_endofpacket;                                                              // cmd_xbar_mux_013:src_endofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_013_src_valid;                                                                    // cmd_xbar_mux_013:src_valid -> uart_1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_013_src_startofpacket;                                                            // cmd_xbar_mux_013:src_startofpacket -> uart_1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_013_src_data;                                                                     // cmd_xbar_mux_013:src_data -> uart_1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_013_src_channel;                                                                  // cmd_xbar_mux_013:src_channel -> uart_1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_013_src_ready;                                                                    // uart_1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_013:src_ready
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                 // clock_crossing_io_s0_translator:uav_waitrequest -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                  // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> clock_crossing_io_s0_translator:uav_burstcount
	wire   [31:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                   // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> clock_crossing_io_s0_translator:uav_writedata
	wire   [31:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_address;                     // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_address -> clock_crossing_io_s0_translator:uav_address
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_write;                       // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_write -> clock_crossing_io_s0_translator:uav_write
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_lock;                        // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_lock -> clock_crossing_io_s0_translator:uav_lock
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_read;                        // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_read -> clock_crossing_io_s0_translator:uav_read
	wire   [31:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                    // clock_crossing_io_s0_translator:uav_readdata -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;               // clock_crossing_io_s0_translator:uav_readdatavalid -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                 // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> clock_crossing_io_s0_translator:uav_debugaccess
	wire    [3:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                  // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> clock_crossing_io_s0_translator:uav_byteenable
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;          // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;        // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                 // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;       // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;             // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;     // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;              // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;             // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;           // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;            // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;           // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_014_src_endofpacket;                                                              // cmd_xbar_mux_014:src_endofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_014_src_valid;                                                                    // cmd_xbar_mux_014:src_valid -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_014_src_startofpacket;                                                            // cmd_xbar_mux_014:src_startofpacket -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_014_src_data;                                                                     // cmd_xbar_mux_014:src_data -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_014_src_channel;                                                                  // cmd_xbar_mux_014:src_channel -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_014_src_ready;                                                                    // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_014:src_ready
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_waitrequest;                     // tse_control_port_translator:uav_waitrequest -> tse_control_port_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] tse_control_port_translator_avalon_universal_slave_0_agent_m0_burstcount;                      // tse_control_port_translator_avalon_universal_slave_0_agent:m0_burstcount -> tse_control_port_translator:uav_burstcount
	wire   [31:0] tse_control_port_translator_avalon_universal_slave_0_agent_m0_writedata;                       // tse_control_port_translator_avalon_universal_slave_0_agent:m0_writedata -> tse_control_port_translator:uav_writedata
	wire   [31:0] tse_control_port_translator_avalon_universal_slave_0_agent_m0_address;                         // tse_control_port_translator_avalon_universal_slave_0_agent:m0_address -> tse_control_port_translator:uav_address
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_write;                           // tse_control_port_translator_avalon_universal_slave_0_agent:m0_write -> tse_control_port_translator:uav_write
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_lock;                            // tse_control_port_translator_avalon_universal_slave_0_agent:m0_lock -> tse_control_port_translator:uav_lock
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_read;                            // tse_control_port_translator_avalon_universal_slave_0_agent:m0_read -> tse_control_port_translator:uav_read
	wire   [31:0] tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdata;                        // tse_control_port_translator:uav_readdata -> tse_control_port_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                   // tse_control_port_translator:uav_readdatavalid -> tse_control_port_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_m0_debugaccess;                     // tse_control_port_translator_avalon_universal_slave_0_agent:m0_debugaccess -> tse_control_port_translator:uav_debugaccess
	wire    [3:0] tse_control_port_translator_avalon_universal_slave_0_agent_m0_byteenable;                      // tse_control_port_translator_avalon_universal_slave_0_agent:m0_byteenable -> tse_control_port_translator:uav_byteenable
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;              // tse_control_port_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_valid;                    // tse_control_port_translator_avalon_universal_slave_0_agent:rf_source_valid -> tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;            // tse_control_port_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_data;                     // tse_control_port_translator_avalon_universal_slave_0_agent:rf_source_data -> tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_ready;                    // tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tse_control_port_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;           // tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                 // tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tse_control_port_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;         // tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                  // tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tse_control_port_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                 // tse_control_port_translator_avalon_universal_slave_0_agent:rf_sink_ready -> tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;               // tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                // tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;               // tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tse_control_port_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_015_src_endofpacket;                                                              // cmd_xbar_mux_015:src_endofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_015_src_valid;                                                                    // cmd_xbar_mux_015:src_valid -> tse_control_port_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_015_src_startofpacket;                                                            // cmd_xbar_mux_015:src_startofpacket -> tse_control_port_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_015_src_data;                                                                     // cmd_xbar_mux_015:src_data -> tse_control_port_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_015_src_channel;                                                                  // cmd_xbar_mux_015:src_channel -> tse_control_port_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_015_src_ready;                                                                    // tse_control_port_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_015:src_ready
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // sgdma_rx_csr_translator:uav_waitrequest -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> sgdma_rx_csr_translator:uav_burstcount
	wire   [31:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_writedata;                           // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> sgdma_rx_csr_translator:uav_writedata
	wire   [31:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_address;                             // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_address -> sgdma_rx_csr_translator:uav_address
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_write;                               // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_write -> sgdma_rx_csr_translator:uav_write
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_lock;                                // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_lock -> sgdma_rx_csr_translator:uav_lock
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_read;                                // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_read -> sgdma_rx_csr_translator:uav_read
	wire   [31:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                            // sgdma_rx_csr_translator:uav_readdata -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // sgdma_rx_csr_translator:uav_readdatavalid -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sgdma_rx_csr_translator:uav_debugaccess
	wire    [3:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> sgdma_rx_csr_translator:uav_byteenable
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_data;                         // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_016_src_endofpacket;                                                              // cmd_xbar_mux_016:src_endofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_016_src_valid;                                                                    // cmd_xbar_mux_016:src_valid -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_016_src_startofpacket;                                                            // cmd_xbar_mux_016:src_startofpacket -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_016_src_data;                                                                     // cmd_xbar_mux_016:src_data -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_016_src_channel;                                                                  // cmd_xbar_mux_016:src_channel -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_016_src_ready;                                                                    // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_016:src_ready
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // sgdma_tx_csr_translator:uav_waitrequest -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> sgdma_tx_csr_translator:uav_burstcount
	wire   [31:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_writedata;                           // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> sgdma_tx_csr_translator:uav_writedata
	wire   [31:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_address;                             // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_address -> sgdma_tx_csr_translator:uav_address
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_write;                               // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_write -> sgdma_tx_csr_translator:uav_write
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_lock;                                // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_lock -> sgdma_tx_csr_translator:uav_lock
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_read;                                // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_read -> sgdma_tx_csr_translator:uav_read
	wire   [31:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                            // sgdma_tx_csr_translator:uav_readdata -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // sgdma_tx_csr_translator:uav_readdatavalid -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sgdma_tx_csr_translator:uav_debugaccess
	wire    [3:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> sgdma_tx_csr_translator:uav_byteenable
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_data;                         // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_017_src_endofpacket;                                                              // cmd_xbar_mux_017:src_endofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_017_src_valid;                                                                    // cmd_xbar_mux_017:src_valid -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_017_src_startofpacket;                                                            // cmd_xbar_mux_017:src_startofpacket -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_017_src_data;                                                                     // cmd_xbar_mux_017:src_data -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_017_src_channel;                                                                  // cmd_xbar_mux_017:src_channel -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_017_src_ready;                                                                    // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_017:src_ready
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                 // descriptor_memory_s1_translator:uav_waitrequest -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                  // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> descriptor_memory_s1_translator:uav_burstcount
	wire   [31:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                   // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> descriptor_memory_s1_translator:uav_writedata
	wire   [31:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_address;                     // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_address -> descriptor_memory_s1_translator:uav_address
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_write;                       // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_write -> descriptor_memory_s1_translator:uav_write
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock;                        // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_lock -> descriptor_memory_s1_translator:uav_lock
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_read;                        // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_read -> descriptor_memory_s1_translator:uav_read
	wire   [31:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                    // descriptor_memory_s1_translator:uav_readdata -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;               // descriptor_memory_s1_translator:uav_readdatavalid -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                 // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> descriptor_memory_s1_translator:uav_debugaccess
	wire    [3:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                  // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> descriptor_memory_s1_translator:uav_byteenable
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;          // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;        // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                 // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                // descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;       // descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;             // descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;     // descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;              // descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;             // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;           // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;            // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;           // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_018_src_endofpacket;                                                              // cmd_xbar_mux_018:src_endofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_018_src_valid;                                                                    // cmd_xbar_mux_018:src_valid -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_018_src_startofpacket;                                                            // cmd_xbar_mux_018:src_startofpacket -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] cmd_xbar_mux_018_src_data;                                                                     // cmd_xbar_mux_018:src_data -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire   [18:0] cmd_xbar_mux_018_src_channel;                                                                  // cmd_xbar_mux_018:src_channel -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_018_src_ready;                                                                    // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_018:src_ready
	wire          cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket;              // cpu_instruction_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_valid;                    // cpu_instruction_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket;            // cpu_instruction_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [117:0] cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_data;                     // cpu_instruction_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_ready;                    // addr_router:sink_ready -> cpu_instruction_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          cpu_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // cpu_data_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          cpu_data_master_translator_avalon_universal_master_0_agent_cp_valid;                           // cpu_data_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          cpu_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // cpu_data_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [117:0] cpu_data_master_translator_avalon_universal_master_0_agent_cp_data;                            // cpu_data_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          cpu_data_master_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router_001:sink_ready -> cpu_data_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_001_src_endofpacket;                                                               // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                     // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                             // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [117:0] addr_router_001_src_data;                                                                      // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [18:0] addr_router_001_src_channel;                                                                   // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                     // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket;            // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid;                  // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket;          // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [117:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data;                   // sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready;                  // addr_router_002:sink_ready -> sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_002_src_endofpacket;                                                               // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          addr_router_002_src_valid;                                                                     // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire          addr_router_002_src_startofpacket;                                                             // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [117:0] addr_router_002_src_data;                                                                      // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire   [18:0] addr_router_002_src_channel;                                                                   // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire          addr_router_002_src_ready;                                                                     // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket;           // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_003:sink_endofpacket
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid;                 // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_003:sink_valid
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket;         // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [117:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data;                  // sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:cp_data -> addr_router_003:sink_data
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready;                 // addr_router_003:sink_ready -> sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_003_src_endofpacket;                                                               // addr_router_003:src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire          addr_router_003_src_valid;                                                                     // addr_router_003:src_valid -> cmd_xbar_demux_003:sink_valid
	wire          addr_router_003_src_startofpacket;                                                             // addr_router_003:src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [117:0] addr_router_003_src_data;                                                                      // addr_router_003:src_data -> cmd_xbar_demux_003:sink_data
	wire   [18:0] addr_router_003_src_channel;                                                                   // addr_router_003:src_channel -> cmd_xbar_demux_003:sink_channel
	wire          addr_router_003_src_ready;                                                                     // cmd_xbar_demux_003:sink_ready -> addr_router_003:src_ready
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket;            // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_004:sink_endofpacket
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid;                  // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_004:sink_valid
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket;          // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_004:sink_startofpacket
	wire  [117:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data;                   // sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:cp_data -> addr_router_004:sink_data
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready;                  // addr_router_004:sink_ready -> sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_004_src_endofpacket;                                                               // addr_router_004:src_endofpacket -> cmd_xbar_demux_004:sink_endofpacket
	wire          addr_router_004_src_valid;                                                                     // addr_router_004:src_valid -> cmd_xbar_demux_004:sink_valid
	wire          addr_router_004_src_startofpacket;                                                             // addr_router_004:src_startofpacket -> cmd_xbar_demux_004:sink_startofpacket
	wire  [117:0] addr_router_004_src_data;                                                                      // addr_router_004:src_data -> cmd_xbar_demux_004:sink_data
	wire   [18:0] addr_router_004_src_channel;                                                                   // addr_router_004:src_channel -> cmd_xbar_demux_004:sink_channel
	wire          addr_router_004_src_ready;                                                                     // cmd_xbar_demux_004:sink_ready -> addr_router_004:src_ready
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket;           // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_005:sink_endofpacket
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid;                 // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_005:sink_valid
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket;         // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_005:sink_startofpacket
	wire  [117:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data;                  // sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:cp_data -> addr_router_005:sink_data
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready;                 // addr_router_005:sink_ready -> sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_005_src_endofpacket;                                                               // addr_router_005:src_endofpacket -> cmd_xbar_demux_005:sink_endofpacket
	wire          addr_router_005_src_valid;                                                                     // addr_router_005:src_valid -> cmd_xbar_demux_005:sink_valid
	wire          addr_router_005_src_startofpacket;                                                             // addr_router_005:src_startofpacket -> cmd_xbar_demux_005:sink_startofpacket
	wire  [117:0] addr_router_005_src_data;                                                                      // addr_router_005:src_data -> cmd_xbar_demux_005:sink_data
	wire   [18:0] addr_router_005_src_channel;                                                                   // addr_router_005:src_channel -> cmd_xbar_demux_005:sink_channel
	wire          addr_router_005_src_ready;                                                                     // cmd_xbar_demux_005:sink_ready -> addr_router_005:src_ready
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket;                    // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_006:sink_endofpacket
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_valid;                          // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_006:sink_valid
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket;                  // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_006:sink_startofpacket
	wire  [117:0] sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_data;                           // sgdma_rx_m_write_translator_avalon_universal_master_0_agent:cp_data -> addr_router_006:sink_data
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_ready;                          // addr_router_006:sink_ready -> sgdma_rx_m_write_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_006_src_endofpacket;                                                               // addr_router_006:src_endofpacket -> cmd_xbar_demux_006:sink_endofpacket
	wire          addr_router_006_src_valid;                                                                     // addr_router_006:src_valid -> cmd_xbar_demux_006:sink_valid
	wire          addr_router_006_src_startofpacket;                                                             // addr_router_006:src_startofpacket -> cmd_xbar_demux_006:sink_startofpacket
	wire  [117:0] addr_router_006_src_data;                                                                      // addr_router_006:src_data -> cmd_xbar_demux_006:sink_data
	wire   [18:0] addr_router_006_src_channel;                                                                   // addr_router_006:src_channel -> cmd_xbar_demux_006:sink_channel
	wire          addr_router_006_src_ready;                                                                     // cmd_xbar_demux_006:sink_ready -> addr_router_006:src_ready
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket;                     // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_007:sink_endofpacket
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_valid;                           // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_007:sink_valid
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket;                   // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_007:sink_startofpacket
	wire  [117:0] sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_data;                            // sgdma_tx_m_read_translator_avalon_universal_master_0_agent:cp_data -> addr_router_007:sink_data
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_ready;                           // addr_router_007:sink_ready -> sgdma_tx_m_read_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_007_src_endofpacket;                                                               // addr_router_007:src_endofpacket -> cmd_xbar_demux_007:sink_endofpacket
	wire          addr_router_007_src_valid;                                                                     // addr_router_007:src_valid -> cmd_xbar_demux_007:sink_valid
	wire          addr_router_007_src_startofpacket;                                                             // addr_router_007:src_startofpacket -> cmd_xbar_demux_007:sink_startofpacket
	wire  [117:0] addr_router_007_src_data;                                                                      // addr_router_007:src_data -> cmd_xbar_demux_007:sink_data
	wire   [18:0] addr_router_007_src_channel;                                                                   // addr_router_007:src_channel -> cmd_xbar_demux_007:sink_channel
	wire          addr_router_007_src_ready;                                                                     // cmd_xbar_demux_007:sink_ready -> addr_router_007:src_ready
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket;                // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid;                      // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket;              // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [117:0] cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data;                       // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready;                      // id_router:sink_ready -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                     // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                           // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                   // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [117:0] id_router_src_data;                                                                            // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [18:0] id_router_src_channel;                                                                         // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                           // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                             // sdram_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                   // sdram_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                           // sdram_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [117:0] sdram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                   // id_router_001:sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                 // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                       // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                               // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [117:0] id_router_001_src_data;                                                                        // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [18:0] id_router_001_src_channel;                                                                     // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                       // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                    // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid;                          // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;                  // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire   [99:0] sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data;                           // sram_avalon_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready;                          // id_router_002:sink_ready -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                    // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_valid;                          // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                  // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [117:0] onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_data;                           // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_ready;                          // id_router_003:sink_ready -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                 // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                       // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                               // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [117:0] id_router_003_src_data;                                                                        // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire   [18:0] id_router_003_src_channel;                                                                     // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                       // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_valid;                              // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire   [90:0] cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_data;                               // cfi_flash_uas_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_004:sink_ready -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:rp_ready
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // sma_in_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // sma_in_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // sma_in_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [117:0] sma_in_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // sma_in_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          sma_in_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_005:sink_ready -> sma_in_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                                 // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                       // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                               // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [117:0] id_router_005_src_data;                                                                        // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire   [18:0] id_router_005_src_channel;                                                                     // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                       // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                           // sma_out_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                 // sma_out_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                         // sma_out_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [117:0] sma_out_s1_translator_avalon_universal_slave_0_agent_rp_data;                                  // sma_out_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          sma_out_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                 // id_router_006:sink_ready -> sma_out_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                                 // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                       // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                               // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [117:0] id_router_006_src_data;                                                                        // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire   [18:0] id_router_006_src_channel;                                                                     // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                       // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid;                         // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [117:0] audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data;                          // audio_avalon_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready;                         // id_router_007:sink_ready -> audio_avalon_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                                 // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                       // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                               // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [117:0] id_router_007_src_data;                                                                        // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire   [18:0] id_router_007_src_channel;                                                                     // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                       // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // usb_hc_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rp_valid;                                     // usb_hc_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // usb_hc_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [117:0] usb_hc_translator_avalon_universal_slave_0_agent_rp_data;                                      // usb_hc_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          usb_hc_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_008:sink_ready -> usb_hc_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                                 // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                       // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                               // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [117:0] id_router_008_src_data;                                                                        // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire   [18:0] id_router_008_src_channel;                                                                     // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                       // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // usb_dc_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_009:sink_endofpacket
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rp_valid;                                     // usb_dc_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_009:sink_valid
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // usb_dc_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_009:sink_startofpacket
	wire  [117:0] usb_dc_translator_avalon_universal_slave_0_agent_rp_data;                                      // usb_dc_translator_avalon_universal_slave_0_agent:rp_data -> id_router_009:sink_data
	wire          usb_dc_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_009:sink_ready -> usb_dc_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_009_src_endofpacket;                                                                 // id_router_009:src_endofpacket -> rsp_xbar_demux_009:sink_endofpacket
	wire          id_router_009_src_valid;                                                                       // id_router_009:src_valid -> rsp_xbar_demux_009:sink_valid
	wire          id_router_009_src_startofpacket;                                                               // id_router_009:src_startofpacket -> rsp_xbar_demux_009:sink_startofpacket
	wire  [117:0] id_router_009_src_data;                                                                        // id_router_009:src_data -> rsp_xbar_demux_009:sink_data
	wire   [18:0] id_router_009_src_channel;                                                                     // id_router_009:src_channel -> rsp_xbar_demux_009:sink_channel
	wire          id_router_009_src_ready;                                                                       // rsp_xbar_demux_009:sink_ready -> id_router_009:src_ready
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_endofpacket;                     // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_010:sink_endofpacket
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_valid;                           // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_010:sink_valid
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_startofpacket;                   // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_010:sink_startofpacket
	wire  [117:0] vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_data;                            // vic_0_csr_access_translator_avalon_universal_slave_0_agent:rp_data -> id_router_010:sink_data
	wire          vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_ready;                           // id_router_010:sink_ready -> vic_0_csr_access_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_010_src_endofpacket;                                                                 // id_router_010:src_endofpacket -> rsp_xbar_demux_010:sink_endofpacket
	wire          id_router_010_src_valid;                                                                       // id_router_010:src_valid -> rsp_xbar_demux_010:sink_valid
	wire          id_router_010_src_startofpacket;                                                               // id_router_010:src_startofpacket -> rsp_xbar_demux_010:sink_startofpacket
	wire  [117:0] id_router_010_src_data;                                                                        // id_router_010:src_data -> rsp_xbar_demux_010:sink_data
	wire   [18:0] id_router_010_src_channel;                                                                     // id_router_010:src_channel -> rsp_xbar_demux_010:sink_channel
	wire          id_router_010_src_ready;                                                                       // rsp_xbar_demux_010:sink_ready -> id_router_010:src_ready
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_011:sink_endofpacket
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid;                   // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_011:sink_valid
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_011:sink_startofpacket
	wire  [117:0] can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data;                    // can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_011:sink_data
	wire          can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_011:sink_ready -> can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_011_src_endofpacket;                                                                 // id_router_011:src_endofpacket -> rsp_xbar_demux_011:sink_endofpacket
	wire          id_router_011_src_valid;                                                                       // id_router_011:src_valid -> rsp_xbar_demux_011:sink_valid
	wire          id_router_011_src_startofpacket;                                                               // id_router_011:src_startofpacket -> rsp_xbar_demux_011:sink_startofpacket
	wire  [117:0] id_router_011_src_data;                                                                        // id_router_011:src_data -> rsp_xbar_demux_011:sink_data
	wire   [18:0] id_router_011_src_channel;                                                                     // id_router_011:src_channel -> rsp_xbar_demux_011:sink_channel
	wire          id_router_011_src_ready;                                                                       // rsp_xbar_demux_011:sink_ready -> id_router_011:src_ready
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // uart_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_012:sink_endofpacket
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // uart_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_012:sink_valid
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // uart_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_012:sink_startofpacket
	wire  [117:0] uart_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // uart_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_012:sink_data
	wire          uart_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_012:sink_ready -> uart_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_012_src_endofpacket;                                                                 // id_router_012:src_endofpacket -> rsp_xbar_demux_012:sink_endofpacket
	wire          id_router_012_src_valid;                                                                       // id_router_012:src_valid -> rsp_xbar_demux_012:sink_valid
	wire          id_router_012_src_startofpacket;                                                               // id_router_012:src_startofpacket -> rsp_xbar_demux_012:sink_startofpacket
	wire  [117:0] id_router_012_src_data;                                                                        // id_router_012:src_data -> rsp_xbar_demux_012:sink_data
	wire   [18:0] id_router_012_src_channel;                                                                     // id_router_012:src_channel -> rsp_xbar_demux_012:sink_channel
	wire          id_router_012_src_ready;                                                                       // rsp_xbar_demux_012:sink_ready -> id_router_012:src_ready
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // uart_1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_013:sink_endofpacket
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // uart_1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_013:sink_valid
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // uart_1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_013:sink_startofpacket
	wire  [117:0] uart_1_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // uart_1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_013:sink_data
	wire          uart_1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_013:sink_ready -> uart_1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_013_src_endofpacket;                                                                 // id_router_013:src_endofpacket -> rsp_xbar_demux_013:sink_endofpacket
	wire          id_router_013_src_valid;                                                                       // id_router_013:src_valid -> rsp_xbar_demux_013:sink_valid
	wire          id_router_013_src_startofpacket;                                                               // id_router_013:src_startofpacket -> rsp_xbar_demux_013:sink_startofpacket
	wire  [117:0] id_router_013_src_data;                                                                        // id_router_013:src_data -> rsp_xbar_demux_013:sink_data
	wire   [18:0] id_router_013_src_channel;                                                                     // id_router_013:src_channel -> rsp_xbar_demux_013:sink_channel
	wire          id_router_013_src_ready;                                                                       // rsp_xbar_demux_013:sink_ready -> id_router_013:src_ready
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                 // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_014:sink_endofpacket
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_valid;                       // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_014:sink_valid
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;               // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_014:sink_startofpacket
	wire  [117:0] clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_data;                        // clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_014:sink_data
	wire          clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_ready;                       // id_router_014:sink_ready -> clock_crossing_io_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_014_src_endofpacket;                                                                 // id_router_014:src_endofpacket -> rsp_xbar_demux_014:sink_endofpacket
	wire          id_router_014_src_valid;                                                                       // id_router_014:src_valid -> rsp_xbar_demux_014:sink_valid
	wire          id_router_014_src_startofpacket;                                                               // id_router_014:src_startofpacket -> rsp_xbar_demux_014:sink_startofpacket
	wire  [117:0] id_router_014_src_data;                                                                        // id_router_014:src_data -> rsp_xbar_demux_014:sink_data
	wire   [18:0] id_router_014_src_channel;                                                                     // id_router_014:src_channel -> rsp_xbar_demux_014:sink_channel
	wire          id_router_014_src_ready;                                                                       // rsp_xbar_demux_014:sink_ready -> id_router_014:src_ready
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rp_endofpacket;                     // tse_control_port_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_015:sink_endofpacket
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rp_valid;                           // tse_control_port_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_015:sink_valid
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rp_startofpacket;                   // tse_control_port_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_015:sink_startofpacket
	wire  [117:0] tse_control_port_translator_avalon_universal_slave_0_agent_rp_data;                            // tse_control_port_translator_avalon_universal_slave_0_agent:rp_data -> id_router_015:sink_data
	wire          tse_control_port_translator_avalon_universal_slave_0_agent_rp_ready;                           // id_router_015:sink_ready -> tse_control_port_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_015_src_endofpacket;                                                                 // id_router_015:src_endofpacket -> rsp_xbar_demux_015:sink_endofpacket
	wire          id_router_015_src_valid;                                                                       // id_router_015:src_valid -> rsp_xbar_demux_015:sink_valid
	wire          id_router_015_src_startofpacket;                                                               // id_router_015:src_startofpacket -> rsp_xbar_demux_015:sink_startofpacket
	wire  [117:0] id_router_015_src_data;                                                                        // id_router_015:src_data -> rsp_xbar_demux_015:sink_data
	wire   [18:0] id_router_015_src_channel;                                                                     // id_router_015:src_channel -> rsp_xbar_demux_015:sink_channel
	wire          id_router_015_src_ready;                                                                       // rsp_xbar_demux_015:sink_ready -> id_router_015:src_ready
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_016:sink_endofpacket
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_valid;                               // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_016:sink_valid
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_016:sink_startofpacket
	wire  [117:0] sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_data;                                // sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router_016:sink_data
	wire          sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_016:sink_ready -> sgdma_rx_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_016_src_endofpacket;                                                                 // id_router_016:src_endofpacket -> rsp_xbar_demux_016:sink_endofpacket
	wire          id_router_016_src_valid;                                                                       // id_router_016:src_valid -> rsp_xbar_demux_016:sink_valid
	wire          id_router_016_src_startofpacket;                                                               // id_router_016:src_startofpacket -> rsp_xbar_demux_016:sink_startofpacket
	wire  [117:0] id_router_016_src_data;                                                                        // id_router_016:src_data -> rsp_xbar_demux_016:sink_data
	wire   [18:0] id_router_016_src_channel;                                                                     // id_router_016:src_channel -> rsp_xbar_demux_016:sink_channel
	wire          id_router_016_src_ready;                                                                       // rsp_xbar_demux_016:sink_ready -> id_router_016:src_ready
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_017:sink_endofpacket
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_valid;                               // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_017:sink_valid
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_017:sink_startofpacket
	wire  [117:0] sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_data;                                // sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router_017:sink_data
	wire          sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_017:sink_ready -> sgdma_tx_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_017_src_endofpacket;                                                                 // id_router_017:src_endofpacket -> rsp_xbar_demux_017:sink_endofpacket
	wire          id_router_017_src_valid;                                                                       // id_router_017:src_valid -> rsp_xbar_demux_017:sink_valid
	wire          id_router_017_src_startofpacket;                                                               // id_router_017:src_startofpacket -> rsp_xbar_demux_017:sink_startofpacket
	wire  [117:0] id_router_017_src_data;                                                                        // id_router_017:src_data -> rsp_xbar_demux_017:sink_data
	wire   [18:0] id_router_017_src_channel;                                                                     // id_router_017:src_channel -> rsp_xbar_demux_017:sink_channel
	wire          id_router_017_src_ready;                                                                       // rsp_xbar_demux_017:sink_ready -> id_router_017:src_ready
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                 // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_018:sink_endofpacket
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid;                       // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_018:sink_valid
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;               // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_018:sink_startofpacket
	wire  [117:0] descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_data;                        // descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_018:sink_data
	wire          descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready;                       // id_router_018:sink_ready -> descriptor_memory_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_018_src_endofpacket;                                                                 // id_router_018:src_endofpacket -> rsp_xbar_demux_018:sink_endofpacket
	wire          id_router_018_src_valid;                                                                       // id_router_018:src_valid -> rsp_xbar_demux_018:sink_valid
	wire          id_router_018_src_startofpacket;                                                               // id_router_018:src_startofpacket -> rsp_xbar_demux_018:sink_startofpacket
	wire  [117:0] id_router_018_src_data;                                                                        // id_router_018:src_data -> rsp_xbar_demux_018:sink_data
	wire   [18:0] id_router_018_src_channel;                                                                     // id_router_018:src_channel -> rsp_xbar_demux_018:sink_channel
	wire          id_router_018_src_ready;                                                                       // rsp_xbar_demux_018:sink_ready -> id_router_018:src_ready
	wire          addr_router_src_endofpacket;                                                                   // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                         // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                 // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [117:0] addr_router_src_data;                                                                          // addr_router:src_data -> limiter:cmd_sink_data
	wire   [18:0] addr_router_src_channel;                                                                       // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                         // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                   // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                 // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [117:0] limiter_cmd_src_data;                                                                          // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [18:0] limiter_cmd_src_channel;                                                                       // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                         // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                  // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                        // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [117:0] rsp_xbar_mux_src_data;                                                                         // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [18:0] rsp_xbar_mux_src_channel;                                                                      // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                        // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                   // limiter:rsp_src_endofpacket -> cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                         // limiter:rsp_src_valid -> cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                 // limiter:rsp_src_startofpacket -> cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [117:0] limiter_rsp_src_data;                                                                          // limiter:rsp_src_data -> cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [18:0] limiter_rsp_src_channel;                                                                       // limiter:rsp_src_channel -> cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                                         // cpu_instruction_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                  // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                        // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_src_data;                                                                         // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire   [18:0] cmd_xbar_mux_src_channel;                                                                      // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                        // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                             // burst_adapter:source0_endofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                   // burst_adapter:source0_valid -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                           // burst_adapter:source0_startofpacket -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_source0_data;                                                                    // burst_adapter:source0_data -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                   // cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [18:0] burst_adapter_source0_channel;                                                                 // burst_adapter:source0_channel -> cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                              // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                    // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                            // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_001_src_data;                                                                     // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire   [18:0] cmd_xbar_mux_001_src_channel;                                                                  // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                    // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                         // burst_adapter_001:source0_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                               // burst_adapter_001:source0_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                       // burst_adapter_001:source0_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_001_source0_data;                                                                // burst_adapter_001:source0_data -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                               // sdram_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [18:0] burst_adapter_001_source0_channel;                                                             // burst_adapter_001:source0_channel -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          burst_adapter_002_source0_endofpacket;                                                         // burst_adapter_002:source0_endofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                               // burst_adapter_002:source0_valid -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                       // burst_adapter_002:source0_startofpacket -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [99:0] burst_adapter_002_source0_data;                                                                // burst_adapter_002:source0_data -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                               // sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire   [18:0] burst_adapter_002_source0_channel;                                                             // burst_adapter_002:source0_channel -> sram_avalon_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_endofpacket;                                                              // cmd_xbar_mux_003:src_endofpacket -> burst_adapter_003:sink0_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                    // cmd_xbar_mux_003:src_valid -> burst_adapter_003:sink0_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                            // cmd_xbar_mux_003:src_startofpacket -> burst_adapter_003:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_003_src_data;                                                                     // cmd_xbar_mux_003:src_data -> burst_adapter_003:sink0_data
	wire   [18:0] cmd_xbar_mux_003_src_channel;                                                                  // cmd_xbar_mux_003:src_channel -> burst_adapter_003:sink0_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                    // burst_adapter_003:sink0_ready -> cmd_xbar_mux_003:src_ready
	wire          burst_adapter_003_source0_endofpacket;                                                         // burst_adapter_003:source0_endofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_003_source0_valid;                                                               // burst_adapter_003:source0_valid -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_003_source0_startofpacket;                                                       // burst_adapter_003:source0_startofpacket -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_003_source0_data;                                                                // burst_adapter_003:source0_data -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_003_source0_ready;                                                               // onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_003:source0_ready
	wire   [18:0] burst_adapter_003_source0_channel;                                                             // burst_adapter_003:source0_channel -> onchip_memory2_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          burst_adapter_004_source0_endofpacket;                                                         // burst_adapter_004:source0_endofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_004_source0_valid;                                                               // burst_adapter_004:source0_valid -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_004_source0_startofpacket;                                                       // burst_adapter_004:source0_startofpacket -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [90:0] burst_adapter_004_source0_data;                                                                // burst_adapter_004:source0_data -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_004_source0_ready;                                                               // cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_004:source0_ready
	wire   [18:0] burst_adapter_004_source0_channel;                                                             // burst_adapter_004:source0_channel -> cfi_flash_uas_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                               // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                     // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                             // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src0_data;                                                                      // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [18:0] cmd_xbar_demux_src0_channel;                                                                   // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                     // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                               // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                     // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                             // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src1_data;                                                                      // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [18:0] cmd_xbar_demux_src1_channel;                                                                   // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                     // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                               // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                     // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                             // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src2_data;                                                                      // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [18:0] cmd_xbar_demux_src2_channel;                                                                   // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                     // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_src3_endofpacket;                                                               // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_src3_valid;                                                                     // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_src3_startofpacket;                                                             // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src3_data;                                                                      // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [18:0] cmd_xbar_demux_src3_channel;                                                                   // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_src3_ready;                                                                     // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire          cmd_xbar_demux_src4_endofpacket;                                                               // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_src4_valid;                                                                     // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_src4_startofpacket;                                                             // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src4_data;                                                                      // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [18:0] cmd_xbar_demux_src4_channel;                                                                   // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_src4_ready;                                                                     // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                           // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                 // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                         // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src0_data;                                                                  // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [18:0] cmd_xbar_demux_001_src0_channel;                                                               // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                 // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                           // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                 // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                         // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src1_data;                                                                  // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [18:0] cmd_xbar_demux_001_src1_channel;                                                               // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                 // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                           // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                 // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                         // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src2_data;                                                                  // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire   [18:0] cmd_xbar_demux_001_src2_channel;                                                               // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                 // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          cmd_xbar_demux_001_src3_endofpacket;                                                           // cmd_xbar_demux_001:src3_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          cmd_xbar_demux_001_src3_valid;                                                                 // cmd_xbar_demux_001:src3_valid -> cmd_xbar_mux_003:sink1_valid
	wire          cmd_xbar_demux_001_src3_startofpacket;                                                         // cmd_xbar_demux_001:src3_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src3_data;                                                                  // cmd_xbar_demux_001:src3_data -> cmd_xbar_mux_003:sink1_data
	wire   [18:0] cmd_xbar_demux_001_src3_channel;                                                               // cmd_xbar_demux_001:src3_channel -> cmd_xbar_mux_003:sink1_channel
	wire          cmd_xbar_demux_001_src3_ready;                                                                 // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_001:src3_ready
	wire          cmd_xbar_demux_001_src4_endofpacket;                                                           // cmd_xbar_demux_001:src4_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire          cmd_xbar_demux_001_src4_valid;                                                                 // cmd_xbar_demux_001:src4_valid -> cmd_xbar_mux_004:sink1_valid
	wire          cmd_xbar_demux_001_src4_startofpacket;                                                         // cmd_xbar_demux_001:src4_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src4_data;                                                                  // cmd_xbar_demux_001:src4_data -> cmd_xbar_mux_004:sink1_data
	wire   [18:0] cmd_xbar_demux_001_src4_channel;                                                               // cmd_xbar_demux_001:src4_channel -> cmd_xbar_mux_004:sink1_channel
	wire          cmd_xbar_demux_001_src4_ready;                                                                 // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_001:src4_ready
	wire          cmd_xbar_demux_001_src5_endofpacket;                                                           // cmd_xbar_demux_001:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_001_src5_valid;                                                                 // cmd_xbar_demux_001:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_001_src5_startofpacket;                                                         // cmd_xbar_demux_001:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src5_data;                                                                  // cmd_xbar_demux_001:src5_data -> cmd_xbar_mux_005:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src5_channel;                                                               // cmd_xbar_demux_001:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_001_src5_ready;                                                                 // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux_001:src5_ready
	wire          cmd_xbar_demux_001_src6_endofpacket;                                                           // cmd_xbar_demux_001:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_001_src6_valid;                                                                 // cmd_xbar_demux_001:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_001_src6_startofpacket;                                                         // cmd_xbar_demux_001:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src6_data;                                                                  // cmd_xbar_demux_001:src6_data -> cmd_xbar_mux_006:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src6_channel;                                                               // cmd_xbar_demux_001:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_001_src6_ready;                                                                 // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux_001:src6_ready
	wire          cmd_xbar_demux_001_src7_endofpacket;                                                           // cmd_xbar_demux_001:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_001_src7_valid;                                                                 // cmd_xbar_demux_001:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_001_src7_startofpacket;                                                         // cmd_xbar_demux_001:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src7_data;                                                                  // cmd_xbar_demux_001:src7_data -> cmd_xbar_mux_007:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src7_channel;                                                               // cmd_xbar_demux_001:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_001_src7_ready;                                                                 // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux_001:src7_ready
	wire          cmd_xbar_demux_001_src8_endofpacket;                                                           // cmd_xbar_demux_001:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_001_src8_valid;                                                                 // cmd_xbar_demux_001:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_001_src8_startofpacket;                                                         // cmd_xbar_demux_001:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src8_data;                                                                  // cmd_xbar_demux_001:src8_data -> cmd_xbar_mux_008:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src8_channel;                                                               // cmd_xbar_demux_001:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_001_src8_ready;                                                                 // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux_001:src8_ready
	wire          cmd_xbar_demux_001_src9_endofpacket;                                                           // cmd_xbar_demux_001:src9_endofpacket -> cmd_xbar_mux_009:sink0_endofpacket
	wire          cmd_xbar_demux_001_src9_valid;                                                                 // cmd_xbar_demux_001:src9_valid -> cmd_xbar_mux_009:sink0_valid
	wire          cmd_xbar_demux_001_src9_startofpacket;                                                         // cmd_xbar_demux_001:src9_startofpacket -> cmd_xbar_mux_009:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src9_data;                                                                  // cmd_xbar_demux_001:src9_data -> cmd_xbar_mux_009:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src9_channel;                                                               // cmd_xbar_demux_001:src9_channel -> cmd_xbar_mux_009:sink0_channel
	wire          cmd_xbar_demux_001_src9_ready;                                                                 // cmd_xbar_mux_009:sink0_ready -> cmd_xbar_demux_001:src9_ready
	wire          cmd_xbar_demux_001_src10_endofpacket;                                                          // cmd_xbar_demux_001:src10_endofpacket -> cmd_xbar_mux_010:sink0_endofpacket
	wire          cmd_xbar_demux_001_src10_valid;                                                                // cmd_xbar_demux_001:src10_valid -> cmd_xbar_mux_010:sink0_valid
	wire          cmd_xbar_demux_001_src10_startofpacket;                                                        // cmd_xbar_demux_001:src10_startofpacket -> cmd_xbar_mux_010:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src10_data;                                                                 // cmd_xbar_demux_001:src10_data -> cmd_xbar_mux_010:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src10_channel;                                                              // cmd_xbar_demux_001:src10_channel -> cmd_xbar_mux_010:sink0_channel
	wire          cmd_xbar_demux_001_src10_ready;                                                                // cmd_xbar_mux_010:sink0_ready -> cmd_xbar_demux_001:src10_ready
	wire          cmd_xbar_demux_001_src12_endofpacket;                                                          // cmd_xbar_demux_001:src12_endofpacket -> cmd_xbar_mux_012:sink0_endofpacket
	wire          cmd_xbar_demux_001_src12_valid;                                                                // cmd_xbar_demux_001:src12_valid -> cmd_xbar_mux_012:sink0_valid
	wire          cmd_xbar_demux_001_src12_startofpacket;                                                        // cmd_xbar_demux_001:src12_startofpacket -> cmd_xbar_mux_012:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src12_data;                                                                 // cmd_xbar_demux_001:src12_data -> cmd_xbar_mux_012:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src12_channel;                                                              // cmd_xbar_demux_001:src12_channel -> cmd_xbar_mux_012:sink0_channel
	wire          cmd_xbar_demux_001_src12_ready;                                                                // cmd_xbar_mux_012:sink0_ready -> cmd_xbar_demux_001:src12_ready
	wire          cmd_xbar_demux_001_src13_endofpacket;                                                          // cmd_xbar_demux_001:src13_endofpacket -> cmd_xbar_mux_013:sink0_endofpacket
	wire          cmd_xbar_demux_001_src13_valid;                                                                // cmd_xbar_demux_001:src13_valid -> cmd_xbar_mux_013:sink0_valid
	wire          cmd_xbar_demux_001_src13_startofpacket;                                                        // cmd_xbar_demux_001:src13_startofpacket -> cmd_xbar_mux_013:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src13_data;                                                                 // cmd_xbar_demux_001:src13_data -> cmd_xbar_mux_013:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src13_channel;                                                              // cmd_xbar_demux_001:src13_channel -> cmd_xbar_mux_013:sink0_channel
	wire          cmd_xbar_demux_001_src13_ready;                                                                // cmd_xbar_mux_013:sink0_ready -> cmd_xbar_demux_001:src13_ready
	wire          cmd_xbar_demux_001_src14_endofpacket;                                                          // cmd_xbar_demux_001:src14_endofpacket -> cmd_xbar_mux_014:sink0_endofpacket
	wire          cmd_xbar_demux_001_src14_valid;                                                                // cmd_xbar_demux_001:src14_valid -> cmd_xbar_mux_014:sink0_valid
	wire          cmd_xbar_demux_001_src14_startofpacket;                                                        // cmd_xbar_demux_001:src14_startofpacket -> cmd_xbar_mux_014:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src14_data;                                                                 // cmd_xbar_demux_001:src14_data -> cmd_xbar_mux_014:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src14_channel;                                                              // cmd_xbar_demux_001:src14_channel -> cmd_xbar_mux_014:sink0_channel
	wire          cmd_xbar_demux_001_src14_ready;                                                                // cmd_xbar_mux_014:sink0_ready -> cmd_xbar_demux_001:src14_ready
	wire          cmd_xbar_demux_001_src15_endofpacket;                                                          // cmd_xbar_demux_001:src15_endofpacket -> cmd_xbar_mux_015:sink0_endofpacket
	wire          cmd_xbar_demux_001_src15_valid;                                                                // cmd_xbar_demux_001:src15_valid -> cmd_xbar_mux_015:sink0_valid
	wire          cmd_xbar_demux_001_src15_startofpacket;                                                        // cmd_xbar_demux_001:src15_startofpacket -> cmd_xbar_mux_015:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src15_data;                                                                 // cmd_xbar_demux_001:src15_data -> cmd_xbar_mux_015:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src15_channel;                                                              // cmd_xbar_demux_001:src15_channel -> cmd_xbar_mux_015:sink0_channel
	wire          cmd_xbar_demux_001_src15_ready;                                                                // cmd_xbar_mux_015:sink0_ready -> cmd_xbar_demux_001:src15_ready
	wire          cmd_xbar_demux_001_src16_endofpacket;                                                          // cmd_xbar_demux_001:src16_endofpacket -> cmd_xbar_mux_016:sink0_endofpacket
	wire          cmd_xbar_demux_001_src16_valid;                                                                // cmd_xbar_demux_001:src16_valid -> cmd_xbar_mux_016:sink0_valid
	wire          cmd_xbar_demux_001_src16_startofpacket;                                                        // cmd_xbar_demux_001:src16_startofpacket -> cmd_xbar_mux_016:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src16_data;                                                                 // cmd_xbar_demux_001:src16_data -> cmd_xbar_mux_016:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src16_channel;                                                              // cmd_xbar_demux_001:src16_channel -> cmd_xbar_mux_016:sink0_channel
	wire          cmd_xbar_demux_001_src16_ready;                                                                // cmd_xbar_mux_016:sink0_ready -> cmd_xbar_demux_001:src16_ready
	wire          cmd_xbar_demux_001_src17_endofpacket;                                                          // cmd_xbar_demux_001:src17_endofpacket -> cmd_xbar_mux_017:sink0_endofpacket
	wire          cmd_xbar_demux_001_src17_valid;                                                                // cmd_xbar_demux_001:src17_valid -> cmd_xbar_mux_017:sink0_valid
	wire          cmd_xbar_demux_001_src17_startofpacket;                                                        // cmd_xbar_demux_001:src17_startofpacket -> cmd_xbar_mux_017:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src17_data;                                                                 // cmd_xbar_demux_001:src17_data -> cmd_xbar_mux_017:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src17_channel;                                                              // cmd_xbar_demux_001:src17_channel -> cmd_xbar_mux_017:sink0_channel
	wire          cmd_xbar_demux_001_src17_ready;                                                                // cmd_xbar_mux_017:sink0_ready -> cmd_xbar_demux_001:src17_ready
	wire          cmd_xbar_demux_001_src18_endofpacket;                                                          // cmd_xbar_demux_001:src18_endofpacket -> cmd_xbar_mux_018:sink0_endofpacket
	wire          cmd_xbar_demux_001_src18_valid;                                                                // cmd_xbar_demux_001:src18_valid -> cmd_xbar_mux_018:sink0_valid
	wire          cmd_xbar_demux_001_src18_startofpacket;                                                        // cmd_xbar_demux_001:src18_startofpacket -> cmd_xbar_mux_018:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src18_data;                                                                 // cmd_xbar_demux_001:src18_data -> cmd_xbar_mux_018:sink0_data
	wire   [18:0] cmd_xbar_demux_001_src18_channel;                                                              // cmd_xbar_demux_001:src18_channel -> cmd_xbar_mux_018:sink0_channel
	wire          cmd_xbar_demux_001_src18_ready;                                                                // cmd_xbar_mux_018:sink0_ready -> cmd_xbar_demux_001:src18_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                           // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux_018:sink1_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                 // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux_018:sink1_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                         // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux_018:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_002_src0_data;                                                                  // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux_018:sink1_data
	wire   [18:0] cmd_xbar_demux_002_src0_channel;                                                               // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux_018:sink1_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                 // cmd_xbar_mux_018:sink1_ready -> cmd_xbar_demux_002:src0_ready
	wire          cmd_xbar_demux_003_src0_endofpacket;                                                           // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux_018:sink2_endofpacket
	wire          cmd_xbar_demux_003_src0_valid;                                                                 // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux_018:sink2_valid
	wire          cmd_xbar_demux_003_src0_startofpacket;                                                         // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux_018:sink2_startofpacket
	wire  [117:0] cmd_xbar_demux_003_src0_data;                                                                  // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux_018:sink2_data
	wire   [18:0] cmd_xbar_demux_003_src0_channel;                                                               // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux_018:sink2_channel
	wire          cmd_xbar_demux_003_src0_ready;                                                                 // cmd_xbar_mux_018:sink2_ready -> cmd_xbar_demux_003:src0_ready
	wire          cmd_xbar_demux_004_src0_endofpacket;                                                           // cmd_xbar_demux_004:src0_endofpacket -> cmd_xbar_mux_018:sink3_endofpacket
	wire          cmd_xbar_demux_004_src0_valid;                                                                 // cmd_xbar_demux_004:src0_valid -> cmd_xbar_mux_018:sink3_valid
	wire          cmd_xbar_demux_004_src0_startofpacket;                                                         // cmd_xbar_demux_004:src0_startofpacket -> cmd_xbar_mux_018:sink3_startofpacket
	wire  [117:0] cmd_xbar_demux_004_src0_data;                                                                  // cmd_xbar_demux_004:src0_data -> cmd_xbar_mux_018:sink3_data
	wire   [18:0] cmd_xbar_demux_004_src0_channel;                                                               // cmd_xbar_demux_004:src0_channel -> cmd_xbar_mux_018:sink3_channel
	wire          cmd_xbar_demux_004_src0_ready;                                                                 // cmd_xbar_mux_018:sink3_ready -> cmd_xbar_demux_004:src0_ready
	wire          cmd_xbar_demux_005_src0_endofpacket;                                                           // cmd_xbar_demux_005:src0_endofpacket -> cmd_xbar_mux_018:sink4_endofpacket
	wire          cmd_xbar_demux_005_src0_valid;                                                                 // cmd_xbar_demux_005:src0_valid -> cmd_xbar_mux_018:sink4_valid
	wire          cmd_xbar_demux_005_src0_startofpacket;                                                         // cmd_xbar_demux_005:src0_startofpacket -> cmd_xbar_mux_018:sink4_startofpacket
	wire  [117:0] cmd_xbar_demux_005_src0_data;                                                                  // cmd_xbar_demux_005:src0_data -> cmd_xbar_mux_018:sink4_data
	wire   [18:0] cmd_xbar_demux_005_src0_channel;                                                               // cmd_xbar_demux_005:src0_channel -> cmd_xbar_mux_018:sink4_channel
	wire          cmd_xbar_demux_005_src0_ready;                                                                 // cmd_xbar_mux_018:sink4_ready -> cmd_xbar_demux_005:src0_ready
	wire          cmd_xbar_demux_006_src0_endofpacket;                                                           // cmd_xbar_demux_006:src0_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire          cmd_xbar_demux_006_src0_valid;                                                                 // cmd_xbar_demux_006:src0_valid -> cmd_xbar_mux_001:sink2_valid
	wire          cmd_xbar_demux_006_src0_startofpacket;                                                         // cmd_xbar_demux_006:src0_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [117:0] cmd_xbar_demux_006_src0_data;                                                                  // cmd_xbar_demux_006:src0_data -> cmd_xbar_mux_001:sink2_data
	wire   [18:0] cmd_xbar_demux_006_src0_channel;                                                               // cmd_xbar_demux_006:src0_channel -> cmd_xbar_mux_001:sink2_channel
	wire          cmd_xbar_demux_006_src0_ready;                                                                 // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_006:src0_ready
	wire          cmd_xbar_demux_007_src0_endofpacket;                                                           // cmd_xbar_demux_007:src0_endofpacket -> cmd_xbar_mux_001:sink3_endofpacket
	wire          cmd_xbar_demux_007_src0_valid;                                                                 // cmd_xbar_demux_007:src0_valid -> cmd_xbar_mux_001:sink3_valid
	wire          cmd_xbar_demux_007_src0_startofpacket;                                                         // cmd_xbar_demux_007:src0_startofpacket -> cmd_xbar_mux_001:sink3_startofpacket
	wire  [117:0] cmd_xbar_demux_007_src0_data;                                                                  // cmd_xbar_demux_007:src0_data -> cmd_xbar_mux_001:sink3_data
	wire   [18:0] cmd_xbar_demux_007_src0_channel;                                                               // cmd_xbar_demux_007:src0_channel -> cmd_xbar_mux_001:sink3_channel
	wire          cmd_xbar_demux_007_src0_ready;                                                                 // cmd_xbar_mux_001:sink3_ready -> cmd_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                               // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                     // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                             // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_src0_data;                                                                      // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [18:0] rsp_xbar_demux_src0_channel;                                                                   // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                     // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                               // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                     // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                             // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_src1_data;                                                                      // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [18:0] rsp_xbar_demux_src1_channel;                                                                   // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                     // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                           // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                 // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                         // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src0_data;                                                                  // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [18:0] rsp_xbar_demux_001_src0_channel;                                                               // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                 // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                           // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                 // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                         // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src1_data;                                                                  // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [18:0] rsp_xbar_demux_001_src1_channel;                                                               // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                 // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_001_src2_endofpacket;                                                           // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_006:sink0_endofpacket
	wire          rsp_xbar_demux_001_src2_valid;                                                                 // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_006:sink0_valid
	wire          rsp_xbar_demux_001_src2_startofpacket;                                                         // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_006:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src2_data;                                                                  // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_006:sink0_data
	wire   [18:0] rsp_xbar_demux_001_src2_channel;                                                               // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_006:sink0_channel
	wire          rsp_xbar_demux_001_src2_ready;                                                                 // rsp_xbar_mux_006:sink0_ready -> rsp_xbar_demux_001:src2_ready
	wire          rsp_xbar_demux_001_src3_endofpacket;                                                           // rsp_xbar_demux_001:src3_endofpacket -> rsp_xbar_mux_007:sink0_endofpacket
	wire          rsp_xbar_demux_001_src3_valid;                                                                 // rsp_xbar_demux_001:src3_valid -> rsp_xbar_mux_007:sink0_valid
	wire          rsp_xbar_demux_001_src3_startofpacket;                                                         // rsp_xbar_demux_001:src3_startofpacket -> rsp_xbar_mux_007:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src3_data;                                                                  // rsp_xbar_demux_001:src3_data -> rsp_xbar_mux_007:sink0_data
	wire   [18:0] rsp_xbar_demux_001_src3_channel;                                                               // rsp_xbar_demux_001:src3_channel -> rsp_xbar_mux_007:sink0_channel
	wire          rsp_xbar_demux_001_src3_ready;                                                                 // rsp_xbar_mux_007:sink0_ready -> rsp_xbar_demux_001:src3_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                           // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                 // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                         // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [117:0] rsp_xbar_demux_002_src0_data;                                                                  // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [18:0] rsp_xbar_demux_002_src0_channel;                                                               // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                 // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                           // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                 // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                         // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [117:0] rsp_xbar_demux_002_src1_data;                                                                  // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [18:0] rsp_xbar_demux_002_src1_channel;                                                               // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                 // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                           // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                 // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                         // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [117:0] rsp_xbar_demux_003_src0_data;                                                                  // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire   [18:0] rsp_xbar_demux_003_src0_channel;                                                               // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                 // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                           // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                 // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_001:sink3_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                         // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [117:0] rsp_xbar_demux_003_src1_data;                                                                  // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_001:sink3_data
	wire   [18:0] rsp_xbar_demux_003_src1_channel;                                                               // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_001:sink3_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                 // rsp_xbar_mux_001:sink3_ready -> rsp_xbar_demux_003:src1_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                           // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                                 // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                         // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [117:0] rsp_xbar_demux_004_src0_data;                                                                  // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire   [18:0] rsp_xbar_demux_004_src0_channel;                                                               // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                                 // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_004_src1_endofpacket;                                                           // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_001:sink4_endofpacket
	wire          rsp_xbar_demux_004_src1_valid;                                                                 // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_001:sink4_valid
	wire          rsp_xbar_demux_004_src1_startofpacket;                                                         // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_001:sink4_startofpacket
	wire  [117:0] rsp_xbar_demux_004_src1_data;                                                                  // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_001:sink4_data
	wire   [18:0] rsp_xbar_demux_004_src1_channel;                                                               // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_001:sink4_channel
	wire          rsp_xbar_demux_004_src1_ready;                                                                 // rsp_xbar_mux_001:sink4_ready -> rsp_xbar_demux_004:src1_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                           // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux_001:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                                 // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux_001:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                         // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux_001:sink5_startofpacket
	wire  [117:0] rsp_xbar_demux_005_src0_data;                                                                  // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux_001:sink5_data
	wire   [18:0] rsp_xbar_demux_005_src0_channel;                                                               // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux_001:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                                 // rsp_xbar_mux_001:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                           // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux_001:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                                 // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux_001:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                         // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux_001:sink6_startofpacket
	wire  [117:0] rsp_xbar_demux_006_src0_data;                                                                  // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux_001:sink6_data
	wire   [18:0] rsp_xbar_demux_006_src0_channel;                                                               // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux_001:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                                 // rsp_xbar_mux_001:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                           // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux_001:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                                 // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux_001:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                         // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux_001:sink7_startofpacket
	wire  [117:0] rsp_xbar_demux_007_src0_data;                                                                  // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux_001:sink7_data
	wire   [18:0] rsp_xbar_demux_007_src0_channel;                                                               // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux_001:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                                 // rsp_xbar_mux_001:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                           // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux_001:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                                 // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux_001:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                         // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux_001:sink8_startofpacket
	wire  [117:0] rsp_xbar_demux_008_src0_data;                                                                  // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux_001:sink8_data
	wire   [18:0] rsp_xbar_demux_008_src0_channel;                                                               // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux_001:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                                 // rsp_xbar_mux_001:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          rsp_xbar_demux_009_src0_endofpacket;                                                           // rsp_xbar_demux_009:src0_endofpacket -> rsp_xbar_mux_001:sink9_endofpacket
	wire          rsp_xbar_demux_009_src0_valid;                                                                 // rsp_xbar_demux_009:src0_valid -> rsp_xbar_mux_001:sink9_valid
	wire          rsp_xbar_demux_009_src0_startofpacket;                                                         // rsp_xbar_demux_009:src0_startofpacket -> rsp_xbar_mux_001:sink9_startofpacket
	wire  [117:0] rsp_xbar_demux_009_src0_data;                                                                  // rsp_xbar_demux_009:src0_data -> rsp_xbar_mux_001:sink9_data
	wire   [18:0] rsp_xbar_demux_009_src0_channel;                                                               // rsp_xbar_demux_009:src0_channel -> rsp_xbar_mux_001:sink9_channel
	wire          rsp_xbar_demux_009_src0_ready;                                                                 // rsp_xbar_mux_001:sink9_ready -> rsp_xbar_demux_009:src0_ready
	wire          rsp_xbar_demux_010_src0_endofpacket;                                                           // rsp_xbar_demux_010:src0_endofpacket -> rsp_xbar_mux_001:sink10_endofpacket
	wire          rsp_xbar_demux_010_src0_valid;                                                                 // rsp_xbar_demux_010:src0_valid -> rsp_xbar_mux_001:sink10_valid
	wire          rsp_xbar_demux_010_src0_startofpacket;                                                         // rsp_xbar_demux_010:src0_startofpacket -> rsp_xbar_mux_001:sink10_startofpacket
	wire  [117:0] rsp_xbar_demux_010_src0_data;                                                                  // rsp_xbar_demux_010:src0_data -> rsp_xbar_mux_001:sink10_data
	wire   [18:0] rsp_xbar_demux_010_src0_channel;                                                               // rsp_xbar_demux_010:src0_channel -> rsp_xbar_mux_001:sink10_channel
	wire          rsp_xbar_demux_010_src0_ready;                                                                 // rsp_xbar_mux_001:sink10_ready -> rsp_xbar_demux_010:src0_ready
	wire          rsp_xbar_demux_012_src0_endofpacket;                                                           // rsp_xbar_demux_012:src0_endofpacket -> rsp_xbar_mux_001:sink12_endofpacket
	wire          rsp_xbar_demux_012_src0_valid;                                                                 // rsp_xbar_demux_012:src0_valid -> rsp_xbar_mux_001:sink12_valid
	wire          rsp_xbar_demux_012_src0_startofpacket;                                                         // rsp_xbar_demux_012:src0_startofpacket -> rsp_xbar_mux_001:sink12_startofpacket
	wire  [117:0] rsp_xbar_demux_012_src0_data;                                                                  // rsp_xbar_demux_012:src0_data -> rsp_xbar_mux_001:sink12_data
	wire   [18:0] rsp_xbar_demux_012_src0_channel;                                                               // rsp_xbar_demux_012:src0_channel -> rsp_xbar_mux_001:sink12_channel
	wire          rsp_xbar_demux_012_src0_ready;                                                                 // rsp_xbar_mux_001:sink12_ready -> rsp_xbar_demux_012:src0_ready
	wire          rsp_xbar_demux_013_src0_endofpacket;                                                           // rsp_xbar_demux_013:src0_endofpacket -> rsp_xbar_mux_001:sink13_endofpacket
	wire          rsp_xbar_demux_013_src0_valid;                                                                 // rsp_xbar_demux_013:src0_valid -> rsp_xbar_mux_001:sink13_valid
	wire          rsp_xbar_demux_013_src0_startofpacket;                                                         // rsp_xbar_demux_013:src0_startofpacket -> rsp_xbar_mux_001:sink13_startofpacket
	wire  [117:0] rsp_xbar_demux_013_src0_data;                                                                  // rsp_xbar_demux_013:src0_data -> rsp_xbar_mux_001:sink13_data
	wire   [18:0] rsp_xbar_demux_013_src0_channel;                                                               // rsp_xbar_demux_013:src0_channel -> rsp_xbar_mux_001:sink13_channel
	wire          rsp_xbar_demux_013_src0_ready;                                                                 // rsp_xbar_mux_001:sink13_ready -> rsp_xbar_demux_013:src0_ready
	wire          rsp_xbar_demux_014_src0_endofpacket;                                                           // rsp_xbar_demux_014:src0_endofpacket -> rsp_xbar_mux_001:sink14_endofpacket
	wire          rsp_xbar_demux_014_src0_valid;                                                                 // rsp_xbar_demux_014:src0_valid -> rsp_xbar_mux_001:sink14_valid
	wire          rsp_xbar_demux_014_src0_startofpacket;                                                         // rsp_xbar_demux_014:src0_startofpacket -> rsp_xbar_mux_001:sink14_startofpacket
	wire  [117:0] rsp_xbar_demux_014_src0_data;                                                                  // rsp_xbar_demux_014:src0_data -> rsp_xbar_mux_001:sink14_data
	wire   [18:0] rsp_xbar_demux_014_src0_channel;                                                               // rsp_xbar_demux_014:src0_channel -> rsp_xbar_mux_001:sink14_channel
	wire          rsp_xbar_demux_014_src0_ready;                                                                 // rsp_xbar_mux_001:sink14_ready -> rsp_xbar_demux_014:src0_ready
	wire          rsp_xbar_demux_015_src0_endofpacket;                                                           // rsp_xbar_demux_015:src0_endofpacket -> rsp_xbar_mux_001:sink15_endofpacket
	wire          rsp_xbar_demux_015_src0_valid;                                                                 // rsp_xbar_demux_015:src0_valid -> rsp_xbar_mux_001:sink15_valid
	wire          rsp_xbar_demux_015_src0_startofpacket;                                                         // rsp_xbar_demux_015:src0_startofpacket -> rsp_xbar_mux_001:sink15_startofpacket
	wire  [117:0] rsp_xbar_demux_015_src0_data;                                                                  // rsp_xbar_demux_015:src0_data -> rsp_xbar_mux_001:sink15_data
	wire   [18:0] rsp_xbar_demux_015_src0_channel;                                                               // rsp_xbar_demux_015:src0_channel -> rsp_xbar_mux_001:sink15_channel
	wire          rsp_xbar_demux_015_src0_ready;                                                                 // rsp_xbar_mux_001:sink15_ready -> rsp_xbar_demux_015:src0_ready
	wire          rsp_xbar_demux_016_src0_endofpacket;                                                           // rsp_xbar_demux_016:src0_endofpacket -> rsp_xbar_mux_001:sink16_endofpacket
	wire          rsp_xbar_demux_016_src0_valid;                                                                 // rsp_xbar_demux_016:src0_valid -> rsp_xbar_mux_001:sink16_valid
	wire          rsp_xbar_demux_016_src0_startofpacket;                                                         // rsp_xbar_demux_016:src0_startofpacket -> rsp_xbar_mux_001:sink16_startofpacket
	wire  [117:0] rsp_xbar_demux_016_src0_data;                                                                  // rsp_xbar_demux_016:src0_data -> rsp_xbar_mux_001:sink16_data
	wire   [18:0] rsp_xbar_demux_016_src0_channel;                                                               // rsp_xbar_demux_016:src0_channel -> rsp_xbar_mux_001:sink16_channel
	wire          rsp_xbar_demux_016_src0_ready;                                                                 // rsp_xbar_mux_001:sink16_ready -> rsp_xbar_demux_016:src0_ready
	wire          rsp_xbar_demux_017_src0_endofpacket;                                                           // rsp_xbar_demux_017:src0_endofpacket -> rsp_xbar_mux_001:sink17_endofpacket
	wire          rsp_xbar_demux_017_src0_valid;                                                                 // rsp_xbar_demux_017:src0_valid -> rsp_xbar_mux_001:sink17_valid
	wire          rsp_xbar_demux_017_src0_startofpacket;                                                         // rsp_xbar_demux_017:src0_startofpacket -> rsp_xbar_mux_001:sink17_startofpacket
	wire  [117:0] rsp_xbar_demux_017_src0_data;                                                                  // rsp_xbar_demux_017:src0_data -> rsp_xbar_mux_001:sink17_data
	wire   [18:0] rsp_xbar_demux_017_src0_channel;                                                               // rsp_xbar_demux_017:src0_channel -> rsp_xbar_mux_001:sink17_channel
	wire          rsp_xbar_demux_017_src0_ready;                                                                 // rsp_xbar_mux_001:sink17_ready -> rsp_xbar_demux_017:src0_ready
	wire          rsp_xbar_demux_018_src0_endofpacket;                                                           // rsp_xbar_demux_018:src0_endofpacket -> rsp_xbar_mux_001:sink18_endofpacket
	wire          rsp_xbar_demux_018_src0_valid;                                                                 // rsp_xbar_demux_018:src0_valid -> rsp_xbar_mux_001:sink18_valid
	wire          rsp_xbar_demux_018_src0_startofpacket;                                                         // rsp_xbar_demux_018:src0_startofpacket -> rsp_xbar_mux_001:sink18_startofpacket
	wire  [117:0] rsp_xbar_demux_018_src0_data;                                                                  // rsp_xbar_demux_018:src0_data -> rsp_xbar_mux_001:sink18_data
	wire   [18:0] rsp_xbar_demux_018_src0_channel;                                                               // rsp_xbar_demux_018:src0_channel -> rsp_xbar_mux_001:sink18_channel
	wire          rsp_xbar_demux_018_src0_ready;                                                                 // rsp_xbar_mux_001:sink18_ready -> rsp_xbar_demux_018:src0_ready
	wire          rsp_xbar_demux_018_src1_endofpacket;                                                           // rsp_xbar_demux_018:src1_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_018_src1_valid;                                                                 // rsp_xbar_demux_018:src1_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_018_src1_startofpacket;                                                         // rsp_xbar_demux_018:src1_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_018_src1_data;                                                                  // rsp_xbar_demux_018:src1_data -> rsp_xbar_mux_002:sink0_data
	wire   [18:0] rsp_xbar_demux_018_src1_channel;                                                               // rsp_xbar_demux_018:src1_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_018_src1_ready;                                                                 // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux_018:src1_ready
	wire          rsp_xbar_demux_018_src2_endofpacket;                                                           // rsp_xbar_demux_018:src2_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire          rsp_xbar_demux_018_src2_valid;                                                                 // rsp_xbar_demux_018:src2_valid -> rsp_xbar_mux_003:sink0_valid
	wire          rsp_xbar_demux_018_src2_startofpacket;                                                         // rsp_xbar_demux_018:src2_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_018_src2_data;                                                                  // rsp_xbar_demux_018:src2_data -> rsp_xbar_mux_003:sink0_data
	wire   [18:0] rsp_xbar_demux_018_src2_channel;                                                               // rsp_xbar_demux_018:src2_channel -> rsp_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_018_src2_ready;                                                                 // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux_018:src2_ready
	wire          rsp_xbar_demux_018_src3_endofpacket;                                                           // rsp_xbar_demux_018:src3_endofpacket -> rsp_xbar_mux_004:sink0_endofpacket
	wire          rsp_xbar_demux_018_src3_valid;                                                                 // rsp_xbar_demux_018:src3_valid -> rsp_xbar_mux_004:sink0_valid
	wire          rsp_xbar_demux_018_src3_startofpacket;                                                         // rsp_xbar_demux_018:src3_startofpacket -> rsp_xbar_mux_004:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_018_src3_data;                                                                  // rsp_xbar_demux_018:src3_data -> rsp_xbar_mux_004:sink0_data
	wire   [18:0] rsp_xbar_demux_018_src3_channel;                                                               // rsp_xbar_demux_018:src3_channel -> rsp_xbar_mux_004:sink0_channel
	wire          rsp_xbar_demux_018_src3_ready;                                                                 // rsp_xbar_mux_004:sink0_ready -> rsp_xbar_demux_018:src3_ready
	wire          rsp_xbar_demux_018_src4_endofpacket;                                                           // rsp_xbar_demux_018:src4_endofpacket -> rsp_xbar_mux_005:sink0_endofpacket
	wire          rsp_xbar_demux_018_src4_valid;                                                                 // rsp_xbar_demux_018:src4_valid -> rsp_xbar_mux_005:sink0_valid
	wire          rsp_xbar_demux_018_src4_startofpacket;                                                         // rsp_xbar_demux_018:src4_startofpacket -> rsp_xbar_mux_005:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_018_src4_data;                                                                  // rsp_xbar_demux_018:src4_data -> rsp_xbar_mux_005:sink0_data
	wire   [18:0] rsp_xbar_demux_018_src4_channel;                                                               // rsp_xbar_demux_018:src4_channel -> rsp_xbar_mux_005:sink0_channel
	wire          rsp_xbar_demux_018_src4_ready;                                                                 // rsp_xbar_mux_005:sink0_ready -> rsp_xbar_demux_018:src4_ready
	wire          id_router_002_src_endofpacket;                                                                 // id_router_002:src_endofpacket -> width_adapter:in_endofpacket
	wire          id_router_002_src_valid;                                                                       // id_router_002:src_valid -> width_adapter:in_valid
	wire          id_router_002_src_startofpacket;                                                               // id_router_002:src_startofpacket -> width_adapter:in_startofpacket
	wire   [99:0] id_router_002_src_data;                                                                        // id_router_002:src_data -> width_adapter:in_data
	wire   [18:0] id_router_002_src_channel;                                                                     // id_router_002:src_channel -> width_adapter:in_channel
	wire          id_router_002_src_ready;                                                                       // width_adapter:in_ready -> id_router_002:src_ready
	wire          width_adapter_src_endofpacket;                                                                 // width_adapter:out_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          width_adapter_src_valid;                                                                       // width_adapter:out_valid -> rsp_xbar_demux_002:sink_valid
	wire          width_adapter_src_startofpacket;                                                               // width_adapter:out_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [117:0] width_adapter_src_data;                                                                        // width_adapter:out_data -> rsp_xbar_demux_002:sink_data
	wire          width_adapter_src_ready;                                                                       // rsp_xbar_demux_002:sink_ready -> width_adapter:out_ready
	wire   [18:0] width_adapter_src_channel;                                                                     // width_adapter:out_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_004_src_endofpacket;                                                                 // id_router_004:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          id_router_004_src_valid;                                                                       // id_router_004:src_valid -> width_adapter_001:in_valid
	wire          id_router_004_src_startofpacket;                                                               // id_router_004:src_startofpacket -> width_adapter_001:in_startofpacket
	wire   [90:0] id_router_004_src_data;                                                                        // id_router_004:src_data -> width_adapter_001:in_data
	wire   [18:0] id_router_004_src_channel;                                                                     // id_router_004:src_channel -> width_adapter_001:in_channel
	wire          id_router_004_src_ready;                                                                       // width_adapter_001:in_ready -> id_router_004:src_ready
	wire          width_adapter_001_src_endofpacket;                                                             // width_adapter_001:out_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          width_adapter_001_src_valid;                                                                   // width_adapter_001:out_valid -> rsp_xbar_demux_004:sink_valid
	wire          width_adapter_001_src_startofpacket;                                                           // width_adapter_001:out_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [117:0] width_adapter_001_src_data;                                                                    // width_adapter_001:out_data -> rsp_xbar_demux_004:sink_data
	wire          width_adapter_001_src_ready;                                                                   // rsp_xbar_demux_004:sink_ready -> width_adapter_001:out_ready
	wire   [18:0] width_adapter_001_src_channel;                                                                 // width_adapter_001:out_channel -> rsp_xbar_demux_004:sink_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                              // cmd_xbar_mux_002:src_endofpacket -> width_adapter_002:in_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                    // cmd_xbar_mux_002:src_valid -> width_adapter_002:in_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                            // cmd_xbar_mux_002:src_startofpacket -> width_adapter_002:in_startofpacket
	wire  [117:0] cmd_xbar_mux_002_src_data;                                                                     // cmd_xbar_mux_002:src_data -> width_adapter_002:in_data
	wire   [18:0] cmd_xbar_mux_002_src_channel;                                                                  // cmd_xbar_mux_002:src_channel -> width_adapter_002:in_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                    // width_adapter_002:in_ready -> cmd_xbar_mux_002:src_ready
	wire          width_adapter_002_src_endofpacket;                                                             // width_adapter_002:out_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          width_adapter_002_src_valid;                                                                   // width_adapter_002:out_valid -> burst_adapter_002:sink0_valid
	wire          width_adapter_002_src_startofpacket;                                                           // width_adapter_002:out_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire   [99:0] width_adapter_002_src_data;                                                                    // width_adapter_002:out_data -> burst_adapter_002:sink0_data
	wire          width_adapter_002_src_ready;                                                                   // burst_adapter_002:sink0_ready -> width_adapter_002:out_ready
	wire   [18:0] width_adapter_002_src_channel;                                                                 // width_adapter_002:out_channel -> burst_adapter_002:sink0_channel
	wire          cmd_xbar_mux_004_src_endofpacket;                                                              // cmd_xbar_mux_004:src_endofpacket -> width_adapter_003:in_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                    // cmd_xbar_mux_004:src_valid -> width_adapter_003:in_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                            // cmd_xbar_mux_004:src_startofpacket -> width_adapter_003:in_startofpacket
	wire  [117:0] cmd_xbar_mux_004_src_data;                                                                     // cmd_xbar_mux_004:src_data -> width_adapter_003:in_data
	wire   [18:0] cmd_xbar_mux_004_src_channel;                                                                  // cmd_xbar_mux_004:src_channel -> width_adapter_003:in_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                    // width_adapter_003:in_ready -> cmd_xbar_mux_004:src_ready
	wire          width_adapter_003_src_endofpacket;                                                             // width_adapter_003:out_endofpacket -> burst_adapter_004:sink0_endofpacket
	wire          width_adapter_003_src_valid;                                                                   // width_adapter_003:out_valid -> burst_adapter_004:sink0_valid
	wire          width_adapter_003_src_startofpacket;                                                           // width_adapter_003:out_startofpacket -> burst_adapter_004:sink0_startofpacket
	wire   [90:0] width_adapter_003_src_data;                                                                    // width_adapter_003:out_data -> burst_adapter_004:sink0_data
	wire          width_adapter_003_src_ready;                                                                   // burst_adapter_004:sink0_ready -> width_adapter_003:out_ready
	wire   [18:0] width_adapter_003_src_channel;                                                                 // width_adapter_003:out_channel -> burst_adapter_004:sink0_channel
	wire          cmd_xbar_demux_001_src11_endofpacket;                                                          // cmd_xbar_demux_001:src11_endofpacket -> crosser:in_endofpacket
	wire          cmd_xbar_demux_001_src11_valid;                                                                // cmd_xbar_demux_001:src11_valid -> crosser:in_valid
	wire          cmd_xbar_demux_001_src11_startofpacket;                                                        // cmd_xbar_demux_001:src11_startofpacket -> crosser:in_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src11_data;                                                                 // cmd_xbar_demux_001:src11_data -> crosser:in_data
	wire   [18:0] cmd_xbar_demux_001_src11_channel;                                                              // cmd_xbar_demux_001:src11_channel -> crosser:in_channel
	wire          cmd_xbar_demux_001_src11_ready;                                                                // crosser:in_ready -> cmd_xbar_demux_001:src11_ready
	wire          crosser_out_endofpacket;                                                                       // crosser:out_endofpacket -> cmd_xbar_mux_011:sink0_endofpacket
	wire          crosser_out_valid;                                                                             // crosser:out_valid -> cmd_xbar_mux_011:sink0_valid
	wire          crosser_out_startofpacket;                                                                     // crosser:out_startofpacket -> cmd_xbar_mux_011:sink0_startofpacket
	wire  [117:0] crosser_out_data;                                                                              // crosser:out_data -> cmd_xbar_mux_011:sink0_data
	wire   [18:0] crosser_out_channel;                                                                           // crosser:out_channel -> cmd_xbar_mux_011:sink0_channel
	wire          crosser_out_ready;                                                                             // cmd_xbar_mux_011:sink0_ready -> crosser:out_ready
	wire          rsp_xbar_demux_011_src0_endofpacket;                                                           // rsp_xbar_demux_011:src0_endofpacket -> crosser_001:in_endofpacket
	wire          rsp_xbar_demux_011_src0_valid;                                                                 // rsp_xbar_demux_011:src0_valid -> crosser_001:in_valid
	wire          rsp_xbar_demux_011_src0_startofpacket;                                                         // rsp_xbar_demux_011:src0_startofpacket -> crosser_001:in_startofpacket
	wire  [117:0] rsp_xbar_demux_011_src0_data;                                                                  // rsp_xbar_demux_011:src0_data -> crosser_001:in_data
	wire   [18:0] rsp_xbar_demux_011_src0_channel;                                                               // rsp_xbar_demux_011:src0_channel -> crosser_001:in_channel
	wire          rsp_xbar_demux_011_src0_ready;                                                                 // crosser_001:in_ready -> rsp_xbar_demux_011:src0_ready
	wire          crosser_001_out_endofpacket;                                                                   // crosser_001:out_endofpacket -> rsp_xbar_mux_001:sink11_endofpacket
	wire          crosser_001_out_valid;                                                                         // crosser_001:out_valid -> rsp_xbar_mux_001:sink11_valid
	wire          crosser_001_out_startofpacket;                                                                 // crosser_001:out_startofpacket -> rsp_xbar_mux_001:sink11_startofpacket
	wire  [117:0] crosser_001_out_data;                                                                          // crosser_001:out_data -> rsp_xbar_mux_001:sink11_data
	wire   [18:0] crosser_001_out_channel;                                                                       // crosser_001:out_channel -> rsp_xbar_mux_001:sink11_channel
	wire          crosser_001_out_ready;                                                                         // rsp_xbar_mux_001:sink11_ready -> crosser_001:out_ready
	wire   [18:0] limiter_cmd_valid_data;                                                                        // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                      (pll_c0_clk),                                                                //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (cpu_instruction_master_burstcount),                                         //                          .burstcount
		.av_read                  (cpu_instruction_master_read),                                               //                          .read
		.av_readdata              (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_write                 (1'b0),                                                                      //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                      (pll_c0_clk),                                                         //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (cpu_data_master_read),                                               //                          .read
		.av_readdata              (cpu_data_master_readdata),                                           //                          .readdata
		.av_write                 (cpu_data_master_write),                                              //                          .write
		.av_writedata             (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_readdatavalid         (),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_read_translator (
		.clk                      (pll_c0_clk),                                                                  //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_rx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_rx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_rx_descriptor_read_read),                                               //                          .read
		.av_readdata              (sgdma_rx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_rx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_write                 (1'b0),                                                                        //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_write_translator (
		.clk                      (pll_c0_clk),                                                                   //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                      //                     reset.reset
		.uav_address              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_rx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_rx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write                 (sgdma_rx_descriptor_write_write),                                              //                          .write
		.av_writedata             (sgdma_rx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                         //               (terminated)
		.av_byteenable            (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                         //               (terminated)
		.av_begintransfer         (1'b0),                                                                         //               (terminated)
		.av_chipselect            (1'b0),                                                                         //               (terminated)
		.av_read                  (1'b0),                                                                         //               (terminated)
		.av_readdata              (),                                                                             //               (terminated)
		.av_readdatavalid         (),                                                                             //               (terminated)
		.av_lock                  (1'b0),                                                                         //               (terminated)
		.av_debugaccess           (1'b0),                                                                         //               (terminated)
		.uav_clken                (),                                                                             //               (terminated)
		.av_clken                 (1'b1),                                                                         //               (terminated)
		.uav_response             (2'b00),                                                                        //               (terminated)
		.av_response              (),                                                                             //               (terminated)
		.uav_writeresponserequest (),                                                                             //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                         //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid    ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_read_translator (
		.clk                      (pll_c0_clk),                                                                  //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_tx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_tx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_tx_descriptor_read_read),                                               //                          .read
		.av_readdata              (sgdma_tx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_tx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_write                 (1'b0),                                                                        //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_write_translator (
		.clk                      (pll_c0_clk),                                                                   //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                      //                     reset.reset
		.uav_address              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_tx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_tx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write                 (sgdma_tx_descriptor_write_write),                                              //                          .write
		.av_writedata             (sgdma_tx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                         //               (terminated)
		.av_byteenable            (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                         //               (terminated)
		.av_begintransfer         (1'b0),                                                                         //               (terminated)
		.av_chipselect            (1'b0),                                                                         //               (terminated)
		.av_read                  (1'b0),                                                                         //               (terminated)
		.av_readdata              (),                                                                             //               (terminated)
		.av_readdatavalid         (),                                                                             //               (terminated)
		.av_lock                  (1'b0),                                                                         //               (terminated)
		.av_debugaccess           (1'b0),                                                                         //               (terminated)
		.uav_clken                (),                                                                             //               (terminated)
		.av_clken                 (1'b1),                                                                         //               (terminated)
		.uav_response             (2'b00),                                                                        //               (terminated)
		.av_response              (),                                                                             //               (terminated)
		.uav_writeresponserequest (),                                                                             //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                         //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid    ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_m_write_translator (
		.clk                      (pll_c0_clk),                                                          //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address              (sgdma_rx_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_rx_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_rx_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_rx_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_rx_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (sgdma_rx_m_write_byteenable),                                         //                          .byteenable
		.av_write                 (sgdma_rx_m_write_write),                                              //                          .write
		.av_writedata             (sgdma_rx_m_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                //               (terminated)
		.av_begintransfer         (1'b0),                                                                //               (terminated)
		.av_chipselect            (1'b0),                                                                //               (terminated)
		.av_read                  (1'b0),                                                                //               (terminated)
		.av_readdata              (),                                                                    //               (terminated)
		.av_readdatavalid         (),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                //               (terminated)
		.av_debugaccess           (1'b0),                                                                //               (terminated)
		.uav_clken                (),                                                                    //               (terminated)
		.av_clken                 (1'b1),                                                                //               (terminated)
		.uav_response             (2'b00),                                                               //               (terminated)
		.av_response              (),                                                                    //               (terminated)
		.uav_writeresponserequest (),                                                                    //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid    ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_m_read_translator (
		.clk                      (pll_c0_clk),                                                         //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (sgdma_tx_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_tx_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_tx_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_tx_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_tx_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_tx_m_read_read),                                               //                          .read
		.av_readdata              (sgdma_tx_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_tx_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_byteenable            (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_write                 (1'b0),                                                               //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.av_debugaccess           (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                      (pll_c0_clk),                                                                       //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cpu_jtag_debug_module_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (cpu_jtag_debug_module_write),                                                      //                         .write
		.av_read                  (cpu_jtag_debug_module_read),                                                       //                         .read
		.av_readdata              (cpu_jtag_debug_module_readdata),                                                   //                         .readdata
		.av_writedata             (cpu_jtag_debug_module_writedata),                                                  //                         .writedata
		.av_byteenable            (cpu_jtag_debug_module_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (cpu_jtag_debug_module_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (cpu_jtag_debug_module_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                                                             //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_chipselect            (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (23),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (pll_c0_clk),                                                          //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                                                      //                         .write
		.av_read                  (sdram_s1_read),                                                       //                         .read
		.av_readdata              (sdram_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdram_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_avalon_slave_translator (
		.clk                      (pll_c0_clk),                                                                   //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                      //                    reset.reset
		.uav_address              (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sram_avalon_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sram_avalon_slave_write),                                                      //                         .write
		.av_read                  (sram_avalon_slave_read),                                                       //                         .read
		.av_readdata              (sram_avalon_slave_readdata),                                                   //                         .readdata
		.av_writedata             (sram_avalon_slave_writedata),                                                  //                         .writedata
		.av_byteenable            (sram_avalon_slave_byteenable),                                                 //                         .byteenable
		.av_chipselect            (sram_avalon_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                             //              (terminated)
		.av_beginbursttransfer    (),                                                                             //              (terminated)
		.av_burstcount            (),                                                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                                                         //              (terminated)
		.av_waitrequest           (1'b0),                                                                         //              (terminated)
		.av_writebyteenable       (),                                                                             //              (terminated)
		.av_lock                  (),                                                                             //              (terminated)
		.av_clken                 (),                                                                             //              (terminated)
		.uav_clken                (1'b0),                                                                         //              (terminated)
		.av_debugaccess           (),                                                                             //              (terminated)
		.av_outputenable          (),                                                                             //              (terminated)
		.uav_response             (),                                                                             //              (terminated)
		.av_response              (2'b00),                                                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                         //              (terminated)
		.uav_writeresponsevalid   (),                                                                             //              (terminated)
		.av_writeresponserequest  (),                                                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                      (pll_c0_clk),                                                                   //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                      //                    reset.reset
		.uav_address              (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory2_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_s1_write),                                                      //                         .write
		.av_readdata              (onchip_memory2_s1_readdata),                                                   //                         .readdata
		.av_writedata             (onchip_memory2_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (onchip_memory2_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (onchip_memory2_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (onchip_memory2_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                             //              (terminated)
		.av_begintransfer         (),                                                                             //              (terminated)
		.av_beginbursttransfer    (),                                                                             //              (terminated)
		.av_burstcount            (),                                                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                                                         //              (terminated)
		.av_waitrequest           (1'b0),                                                                         //              (terminated)
		.av_writebyteenable       (),                                                                             //              (terminated)
		.av_lock                  (),                                                                             //              (terminated)
		.uav_clken                (1'b0),                                                                         //              (terminated)
		.av_debugaccess           (),                                                                             //              (terminated)
		.av_outputenable          (),                                                                             //              (terminated)
		.uav_response             (),                                                                             //              (terminated)
		.av_response              (2'b00),                                                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                         //              (terminated)
		.uav_writeresponsevalid   (),                                                                             //              (terminated)
		.av_writeresponserequest  (),                                                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (23),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cfi_flash_uas_translator (
		.clk                      (pll_c0_clk),                                                               //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                  //                    reset.reset
		.uav_address              (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cfi_flash_uas_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (cfi_flash_uas_write),                                                      //                         .write
		.av_read                  (cfi_flash_uas_read),                                                       //                         .read
		.av_readdata              (cfi_flash_uas_readdata),                                                   //                         .readdata
		.av_writedata             (cfi_flash_uas_writedata),                                                  //                         .writedata
		.av_burstcount            (cfi_flash_uas_burstcount),                                                 //                         .burstcount
		.av_byteenable            (cfi_flash_uas_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (cfi_flash_uas_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (cfi_flash_uas_waitrequest),                                                //                         .waitrequest
		.av_lock                  (cfi_flash_uas_lock),                                                       //                         .lock
		.av_debugaccess           (cfi_flash_uas_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_chipselect            (),                                                                         //              (terminated)
		.av_clken                 (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sma_in_s1_translator (
		.clk                      (pll_c0_clk),                                                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sma_in_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sma_in_s1_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                     //              (terminated)
		.av_read                  (),                                                                     //              (terminated)
		.av_writedata             (),                                                                     //              (terminated)
		.av_begintransfer         (),                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_chipselect            (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sma_out_s1_translator (
		.clk                      (pll_c0_clk),                                                            //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sma_out_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sma_out_s1_write),                                                      //                         .write
		.av_readdata              (sma_out_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sma_out_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (sma_out_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_avalon_slave_translator (
		.clk                      (pll_c0_clk),                                                                    //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                       //                    reset.reset
		.uav_address              (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (audio_avalon_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (audio_avalon_slave_write),                                                      //                         .write
		.av_read                  (audio_avalon_slave_read),                                                       //                         .read
		.av_readdata              (audio_avalon_slave_readdata),                                                   //                         .readdata
		.av_writedata             (audio_avalon_slave_writedata),                                                  //                         .writedata
		.av_begintransfer         (),                                                                              //              (terminated)
		.av_beginbursttransfer    (),                                                                              //              (terminated)
		.av_burstcount            (),                                                                              //              (terminated)
		.av_byteenable            (),                                                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                                                          //              (terminated)
		.av_waitrequest           (1'b0),                                                                          //              (terminated)
		.av_writebyteenable       (),                                                                              //              (terminated)
		.av_lock                  (),                                                                              //              (terminated)
		.av_chipselect            (),                                                                              //              (terminated)
		.av_clken                 (),                                                                              //              (terminated)
		.uav_clken                (1'b0),                                                                          //              (terminated)
		.av_debugaccess           (),                                                                              //              (terminated)
		.av_outputenable          (),                                                                              //              (terminated)
		.uav_response             (),                                                                              //              (terminated)
		.av_response              (2'b00),                                                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                          //              (terminated)
		.uav_writeresponsevalid   (),                                                                              //              (terminated)
		.av_writeresponserequest  (),                                                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (5),
		.AV_WRITE_WAIT_CYCLES           (5),
		.AV_SETUP_WAIT_CYCLES           (14),
		.AV_DATA_HOLD_CYCLES            (14)
	) usb_hc_translator (
		.clk                      (pll_c0_clk),                                                        //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (usb_hc_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (usb_hc_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (usb_hc_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (usb_hc_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (usb_hc_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (usb_hc_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (usb_hc_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (usb_hc_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (usb_hc_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (usb_hc_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (usb_hc_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (usb_hc_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (usb_hc_write),                                                      //                         .write
		.av_read                  (usb_hc_read),                                                       //                         .read
		.av_readdata              (usb_hc_readdata),                                                   //                         .readdata
		.av_writedata             (usb_hc_writedata),                                                  //                         .writedata
		.av_chipselect            (usb_hc_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                  //              (terminated)
		.av_burstcount            (),                                                                  //              (terminated)
		.av_byteenable            (),                                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                                              //              (terminated)
		.av_waitrequest           (1'b0),                                                              //              (terminated)
		.av_writebyteenable       (),                                                                  //              (terminated)
		.av_lock                  (),                                                                  //              (terminated)
		.av_clken                 (),                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                              //              (terminated)
		.av_debugaccess           (),                                                                  //              (terminated)
		.av_outputenable          (),                                                                  //              (terminated)
		.uav_response             (),                                                                  //              (terminated)
		.av_response              (2'b00),                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (15),
		.AV_WRITE_WAIT_CYCLES           (15),
		.AV_SETUP_WAIT_CYCLES           (15),
		.AV_DATA_HOLD_CYCLES            (15)
	) usb_dc_translator (
		.clk                      (pll_c0_clk),                                                        //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (usb_dc_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (usb_dc_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (usb_dc_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (usb_dc_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (usb_dc_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (usb_dc_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (usb_dc_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (usb_dc_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (usb_dc_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (usb_dc_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (usb_dc_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (usb_dc_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (usb_dc_write),                                                      //                         .write
		.av_read                  (usb_dc_read),                                                       //                         .read
		.av_readdata              (usb_dc_readdata),                                                   //                         .readdata
		.av_writedata             (usb_dc_writedata),                                                  //                         .writedata
		.av_chipselect            (usb_dc_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                  //              (terminated)
		.av_burstcount            (),                                                                  //              (terminated)
		.av_byteenable            (),                                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                                              //              (terminated)
		.av_waitrequest           (1'b0),                                                              //              (terminated)
		.av_writebyteenable       (),                                                                  //              (terminated)
		.av_lock                  (),                                                                  //              (terminated)
		.av_clken                 (),                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                              //              (terminated)
		.av_debugaccess           (),                                                                  //              (terminated)
		.av_outputenable          (),                                                                  //              (terminated)
		.uav_response             (),                                                                  //              (terminated)
		.av_response              (2'b00),                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (4),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vic_0_csr_access_translator (
		.clk                      (pll_c0_clk),                                                                  //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                     //                    reset.reset
		.uav_address              (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (vic_0_csr_access_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (vic_0_csr_access_write),                                                      //                         .write
		.av_read                  (vic_0_csr_access_read),                                                       //                         .read
		.av_readdata              (vic_0_csr_access_readdata),                                                   //                         .readdata
		.av_writedata             (vic_0_csr_access_writedata),                                                  //                         .writedata
		.av_begintransfer         (),                                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                                            //              (terminated)
		.av_burstcount            (),                                                                            //              (terminated)
		.av_byteenable            (),                                                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                                                        //              (terminated)
		.av_waitrequest           (1'b0),                                                                        //              (terminated)
		.av_writebyteenable       (),                                                                            //              (terminated)
		.av_lock                  (),                                                                            //              (terminated)
		.av_chipselect            (),                                                                            //              (terminated)
		.av_clken                 (),                                                                            //              (terminated)
		.uav_clken                (1'b0),                                                                        //              (terminated)
		.av_debugaccess           (),                                                                            //              (terminated)
		.av_outputenable          (),                                                                            //              (terminated)
		.uav_response             (),                                                                            //              (terminated)
		.av_response              (2'b00),                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                                            //              (terminated)
		.av_writeresponserequest  (),                                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) can_top_0_avalon_slave_0_translator (
		.clk                      (clk_50_clk_clk),                                                                      //                      clk.clk
		.reset                    (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (can_top_0_avalon_slave_0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (can_top_0_avalon_slave_0_write),                                                      //                         .write
		.av_readdata              (can_top_0_avalon_slave_0_readdata),                                                   //                         .readdata
		.av_writedata             (can_top_0_avalon_slave_0_writedata),                                                  //                         .writedata
		.av_chipselect            (can_top_0_avalon_slave_0_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                                    //              (terminated)
		.av_begintransfer         (),                                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                                    //              (terminated)
		.av_burstcount            (),                                                                                    //              (terminated)
		.av_byteenable            (),                                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                                //              (terminated)
		.av_writebyteenable       (),                                                                                    //              (terminated)
		.av_lock                  (),                                                                                    //              (terminated)
		.av_clken                 (),                                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                                //              (terminated)
		.av_debugaccess           (),                                                                                    //              (terminated)
		.av_outputenable          (),                                                                                    //              (terminated)
		.uav_response             (),                                                                                    //              (terminated)
		.av_response              (2'b00),                                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                      (pll_c0_clk),                                                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (uart_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (uart_0_s1_write),                                                      //                         .write
		.av_read                  (uart_0_s1_read),                                                       //                         .read
		.av_readdata              (uart_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (uart_0_s1_writedata),                                                  //                         .writedata
		.av_begintransfer         (uart_0_s1_begintransfer),                                              //                         .begintransfer
		.av_chipselect            (uart_0_s1_chipselect),                                                 //                         .chipselect
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_1_s1_translator (
		.clk                      (pll_c0_clk),                                                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (uart_1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (uart_1_s1_write),                                                      //                         .write
		.av_read                  (uart_1_s1_read),                                                       //                         .read
		.av_readdata              (uart_1_s1_readdata),                                                   //                         .readdata
		.av_writedata             (uart_1_s1_writedata),                                                  //                         .writedata
		.av_begintransfer         (uart_1_s1_begintransfer),                                              //                         .begintransfer
		.av_chipselect            (uart_1_s1_chipselect),                                                 //                         .chipselect
		.av_beginbursttransfer    (),                                                                     //              (terminated)
		.av_burstcount            (),                                                                     //              (terminated)
		.av_byteenable            (),                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                 //              (terminated)
		.av_waitrequest           (1'b0),                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                     //              (terminated)
		.av_lock                  (),                                                                     //              (terminated)
		.av_clken                 (),                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                 //              (terminated)
		.av_debugaccess           (),                                                                     //              (terminated)
		.av_outputenable          (),                                                                     //              (terminated)
		.uav_response             (),                                                                     //              (terminated)
		.av_response              (2'b00),                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_crossing_io_s0_translator (
		.clk                      (pll_c0_clk),                                                                      //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                         //                    reset.reset
		.uav_address              (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (clock_crossing_io_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (clock_crossing_io_s0_write),                                                      //                         .write
		.av_read                  (clock_crossing_io_s0_read),                                                       //                         .read
		.av_readdata              (clock_crossing_io_s0_readdata),                                                   //                         .readdata
		.av_writedata             (clock_crossing_io_s0_writedata),                                                  //                         .writedata
		.av_burstcount            (clock_crossing_io_s0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (clock_crossing_io_s0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (clock_crossing_io_s0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (clock_crossing_io_s0_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (clock_crossing_io_s0_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                //              (terminated)
		.av_beginbursttransfer    (),                                                                                //              (terminated)
		.av_writebyteenable       (),                                                                                //              (terminated)
		.av_lock                  (),                                                                                //              (terminated)
		.av_chipselect            (),                                                                                //              (terminated)
		.av_clken                 (),                                                                                //              (terminated)
		.uav_clken                (1'b0),                                                                            //              (terminated)
		.av_outputenable          (),                                                                                //              (terminated)
		.uav_response             (),                                                                                //              (terminated)
		.av_response              (2'b00),                                                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                                                //              (terminated)
		.av_writeresponserequest  (),                                                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tse_control_port_translator (
		.clk                      (pll_c0_clk),                                                                  //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                     //                    reset.reset
		.uav_address              (tse_control_port_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (tse_control_port_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (tse_control_port_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (tse_control_port_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (tse_control_port_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (tse_control_port_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (tse_control_port_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (tse_control_port_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (tse_control_port_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (tse_control_port_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (tse_control_port_write),                                                      //                         .write
		.av_read                  (tse_control_port_read),                                                       //                         .read
		.av_readdata              (tse_control_port_readdata),                                                   //                         .readdata
		.av_writedata             (tse_control_port_writedata),                                                  //                         .writedata
		.av_waitrequest           (tse_control_port_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                                            //              (terminated)
		.av_burstcount            (),                                                                            //              (terminated)
		.av_byteenable            (),                                                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                                                        //              (terminated)
		.av_writebyteenable       (),                                                                            //              (terminated)
		.av_lock                  (),                                                                            //              (terminated)
		.av_chipselect            (),                                                                            //              (terminated)
		.av_clken                 (),                                                                            //              (terminated)
		.uav_clken                (1'b0),                                                                        //              (terminated)
		.av_debugaccess           (),                                                                            //              (terminated)
		.av_outputenable          (),                                                                            //              (terminated)
		.uav_response             (),                                                                            //              (terminated)
		.av_response              (2'b00),                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                                            //              (terminated)
		.av_writeresponserequest  (),                                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_rx_csr_translator (
		.clk                      (pll_c0_clk),                                                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sgdma_rx_csr_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sgdma_rx_csr_write),                                                      //                         .write
		.av_read                  (sgdma_rx_csr_read),                                                       //                         .read
		.av_readdata              (sgdma_rx_csr_readdata),                                                   //                         .readdata
		.av_writedata             (sgdma_rx_csr_writedata),                                                  //                         .writedata
		.av_chipselect            (sgdma_rx_csr_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_tx_csr_translator (
		.clk                      (pll_c0_clk),                                                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sgdma_tx_csr_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sgdma_tx_csr_write),                                                      //                         .write
		.av_read                  (sgdma_tx_csr_read),                                                       //                         .read
		.av_readdata              (sgdma_tx_csr_readdata),                                                   //                         .readdata
		.av_writedata             (sgdma_tx_csr_writedata),                                                  //                         .writedata
		.av_chipselect            (sgdma_tx_csr_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) descriptor_memory_s1_translator (
		.clk                      (pll_c0_clk),                                                                      //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                         //                    reset.reset
		.uav_address              (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (descriptor_memory_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (descriptor_memory_s1_write),                                                      //                         .write
		.av_readdata              (descriptor_memory_s1_readdata),                                                   //                         .readdata
		.av_writedata             (descriptor_memory_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (descriptor_memory_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (descriptor_memory_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (descriptor_memory_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                                //              (terminated)
		.av_begintransfer         (),                                                                                //              (terminated)
		.av_beginbursttransfer    (),                                                                                //              (terminated)
		.av_burstcount            (),                                                                                //              (terminated)
		.av_readdatavalid         (1'b0),                                                                            //              (terminated)
		.av_waitrequest           (1'b0),                                                                            //              (terminated)
		.av_writebyteenable       (),                                                                                //              (terminated)
		.av_lock                  (),                                                                                //              (terminated)
		.uav_clken                (1'b0),                                                                            //              (terminated)
		.av_debugaccess           (),                                                                                //              (terminated)
		.av_outputenable          (),                                                                                //              (terminated)
		.uav_response             (),                                                                                //              (terminated)
		.av_response              (2'b00),                                                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                                                //              (terminated)
		.av_writeresponserequest  (),                                                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                         //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                              //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                               //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                            //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                        //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                              //          .ready
		.av_response             (),                                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                  //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (cpu_data_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (cpu_data_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (cpu_data_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (cpu_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (cpu_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (cpu_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (cpu_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (cpu_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                  //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                   //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                            //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                  //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                           //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.av_address              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                            //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                           //          .ready
		.av_response             (),                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                            //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.av_address              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_003_src_valid),                                                            //        rp.valid
		.rp_data                 (rsp_xbar_mux_003_src_data),                                                             //          .data
		.rp_channel              (rsp_xbar_mux_003_src_channel),                                                          //          .channel
		.rp_startofpacket        (rsp_xbar_mux_003_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_003_src_endofpacket),                                                      //          .endofpacket
		.rp_ready                (rsp_xbar_mux_003_src_ready),                                                            //          .ready
		.av_response             (),                                                                                      // (terminated)
		.av_writeresponserequest (1'b0),                                                                                  // (terminated)
		.av_writeresponsevalid   ()                                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                           //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.av_address              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_004_src_valid),                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_004_src_data),                                                            //          .data
		.rp_channel              (rsp_xbar_mux_004_src_channel),                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_004_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_004_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_004_src_ready),                                                           //          .ready
		.av_response             (),                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                            //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.av_address              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_005_src_valid),                                                            //        rp.valid
		.rp_data                 (rsp_xbar_mux_005_src_data),                                                             //          .data
		.rp_channel              (rsp_xbar_mux_005_src_channel),                                                          //          .channel
		.rp_startofpacket        (rsp_xbar_mux_005_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_005_src_endofpacket),                                                      //          .endofpacket
		.rp_ready                (rsp_xbar_mux_005_src_ready),                                                            //          .ready
		.av_response             (),                                                                                      // (terminated)
		.av_writeresponserequest (1'b0),                                                                                  // (terminated)
		.av_writeresponsevalid   ()                                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_m_write_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                   //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.av_address              (sgdma_rx_m_write_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_rx_m_write_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_rx_m_write_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_006_src_valid),                                                   //        rp.valid
		.rp_data                 (rsp_xbar_mux_006_src_data),                                                    //          .data
		.rp_channel              (rsp_xbar_mux_006_src_channel),                                                 //          .channel
		.rp_startofpacket        (rsp_xbar_mux_006_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_006_src_endofpacket),                                             //          .endofpacket
		.rp_ready                (rsp_xbar_mux_006_src_ready),                                                   //          .ready
		.av_response             (),                                                                             // (terminated)
		.av_writeresponserequest (1'b0),                                                                         // (terminated)
		.av_writeresponsevalid   ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_m_read_translator_avalon_universal_master_0_agent (
		.clk                     (pll_c0_clk),                                                                  //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (sgdma_tx_m_read_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_tx_m_read_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_tx_m_read_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_007_src_valid),                                                  //        rp.valid
		.rp_data                 (rsp_xbar_mux_007_src_data),                                                   //          .data
		.rp_channel              (rsp_xbar_mux_007_src_channel),                                                //          .channel
		.rp_startofpacket        (rsp_xbar_mux_007_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_007_src_endofpacket),                                            //          .endofpacket
		.rp_ready                (rsp_xbar_mux_007_src_ready),                                                  //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                                 //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                                //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                                //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                                 //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                          //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                              //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                                 //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                    //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                               //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                               //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                         //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                             //                .channel
		.rf_sink_ready           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                    //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (62),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_ORI_BURST_SIZE_H      (99),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sram_avalon_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                             //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                //       clk_reset.reset
		.m0_address              (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                                        //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                                        //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                         //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                                //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                                  //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                                      //                .channel
		.rf_sink_ready           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                  //     (terminated)
		.m0_writeresponserequest (),                                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                             //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_data           (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                             //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_003_source0_ready),                                                        //              cp.ready
		.cp_valid                (burst_adapter_003_source0_valid),                                                        //                .valid
		.cp_data                 (burst_adapter_003_source0_data),                                                         //                .data
		.cp_startofpacket        (burst_adapter_003_source0_startofpacket),                                                //                .startofpacket
		.cp_endofpacket          (burst_adapter_003_source0_endofpacket),                                                  //                .endofpacket
		.cp_channel              (burst_adapter_003_source0_channel),                                                      //                .channel
		.rf_sink_ready           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                  //     (terminated)
		.m0_writeresponserequest (),                                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                             //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_data           (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (66),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_TRANS_LOCK            (45),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (77),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (47),
		.PKT_PROTECTION_H          (81),
		.PKT_PROTECTION_L          (79),
		.PKT_RESPONSE_STATUS_H     (87),
		.PKT_RESPONSE_STATUS_L     (86),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_ORI_BURST_SIZE_L      (88),
		.PKT_ORI_BURST_SIZE_H      (90),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (91),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cfi_flash_uas_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                         //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                            //       clk_reset.reset
		.m0_address              (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (cfi_flash_uas_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_004_source0_ready),                                                    //              cp.ready
		.cp_valid                (burst_adapter_004_source0_valid),                                                    //                .valid
		.cp_data                 (burst_adapter_004_source0_data),                                                     //                .data
		.cp_startofpacket        (burst_adapter_004_source0_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_004_source0_endofpacket),                                              //                .endofpacket
		.cp_channel              (burst_adapter_004_source0_channel),                                                  //                .channel
		.rf_sink_ready           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (92),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_data           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (pll_c0_clk),                                                                   //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                         // (terminated)
		.out_startofpacket (),                                                                             // (terminated)
		.out_endofpacket   (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sma_in_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sma_in_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_005_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_xbar_mux_005_src_valid),                                                     //                .valid
		.cp_data                 (cmd_xbar_mux_005_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_xbar_mux_005_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_005_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_xbar_mux_005_src_channel),                                                   //                .channel
		.rf_sink_ready           (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sma_in_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sma_in_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sma_in_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sma_out_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                      //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sma_out_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_006_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_006_src_valid),                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_006_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_006_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_006_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_006_src_channel),                                                    //                .channel
		.rf_sink_ready           (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sma_out_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                      //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sma_out_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sma_out_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_avalon_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                              //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                 //       clk_reset.reset
		.m0_address              (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_avalon_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_007_src_ready),                                                              //              cp.ready
		.cp_valid                (cmd_xbar_mux_007_src_valid),                                                              //                .valid
		.cp_data                 (cmd_xbar_mux_007_src_data),                                                               //                .data
		.cp_startofpacket        (cmd_xbar_mux_007_src_startofpacket),                                                      //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_007_src_endofpacket),                                                        //                .endofpacket
		.cp_channel              (cmd_xbar_mux_007_src_channel),                                                            //                .channel
		.rf_sink_ready           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                   //     (terminated)
		.m0_writeresponserequest (),                                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                              //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_data           (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                   // (terminated)
		.csr_read          (1'b0),                                                                                    // (terminated)
		.csr_write         (1'b0),                                                                                    // (terminated)
		.csr_readdata      (),                                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated)
		.almost_full_data  (),                                                                                        // (terminated)
		.almost_empty_data (),                                                                                        // (terminated)
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.in_error          (1'b0),                                                                                    // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_channel        (1'b0),                                                                                    // (terminated)
		.out_channel       ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) usb_hc_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (usb_hc_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (usb_hc_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (usb_hc_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (usb_hc_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (usb_hc_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (usb_hc_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (usb_hc_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (usb_hc_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (usb_hc_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (usb_hc_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (usb_hc_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (usb_hc_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (usb_hc_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (usb_hc_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (usb_hc_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (usb_hc_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_008_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_xbar_mux_008_src_valid),                                                  //                .valid
		.cp_data                 (cmd_xbar_mux_008_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_xbar_mux_008_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_008_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_xbar_mux_008_src_channel),                                                //                .channel
		.rf_sink_ready           (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (usb_hc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (usb_hc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (usb_hc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) usb_dc_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (usb_dc_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (usb_dc_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (usb_dc_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (usb_dc_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (usb_dc_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (usb_dc_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (usb_dc_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (usb_dc_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (usb_dc_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (usb_dc_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (usb_dc_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (usb_dc_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (usb_dc_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (usb_dc_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (usb_dc_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (usb_dc_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_009_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_xbar_mux_009_src_valid),                                                  //                .valid
		.cp_data                 (cmd_xbar_mux_009_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_xbar_mux_009_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_009_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_xbar_mux_009_src_channel),                                                //                .channel
		.rf_sink_ready           (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (usb_dc_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (usb_dc_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (usb_dc_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vic_0_csr_access_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                               //       clk_reset.reset
		.m0_address              (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (vic_0_csr_access_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_010_src_ready),                                                            //              cp.ready
		.cp_valid                (cmd_xbar_mux_010_src_valid),                                                            //                .valid
		.cp_data                 (cmd_xbar_mux_010_src_data),                                                             //                .data
		.cp_startofpacket        (cmd_xbar_mux_010_src_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_010_src_endofpacket),                                                      //                .endofpacket
		.cp_channel              (cmd_xbar_mux_010_src_channel),                                                          //                .channel
		.rf_sink_ready           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                 //     (terminated)
		.m0_writeresponserequest (),                                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                                                //             clk.clk
		.reset                   (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_011_src_ready),                                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_011_src_valid),                                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_011_src_data),                                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_011_src_startofpacket),                                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_011_src_endofpacket),                                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_011_src_channel),                                                                  //                .channel
		.rf_sink_ready           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                                                //       clk.clk
		.reset             (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                                                          //       clk.clk
		.reset             (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                   // (terminated)
		.csr_read          (1'b0),                                                                                    // (terminated)
		.csr_write         (1'b0),                                                                                    // (terminated)
		.csr_readdata      (),                                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated)
		.almost_full_data  (),                                                                                        // (terminated)
		.almost_empty_data (),                                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                                    // (terminated)
		.out_startofpacket (),                                                                                        // (terminated)
		.out_endofpacket   (),                                                                                        // (terminated)
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.in_error          (1'b0),                                                                                    // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_channel        (1'b0),                                                                                    // (terminated)
		.out_channel       ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) uart_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (uart_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_012_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_xbar_mux_012_src_valid),                                                     //                .valid
		.cp_data                 (cmd_xbar_mux_012_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_xbar_mux_012_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_012_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_xbar_mux_012_src_channel),                                                   //                .channel
		.rf_sink_ready           (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (uart_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (uart_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (uart_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) uart_1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (uart_1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_013_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_xbar_mux_013_src_valid),                                                     //                .valid
		.cp_data                 (cmd_xbar_mux_013_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_xbar_mux_013_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_013_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_xbar_mux_013_src_channel),                                                   //                .channel
		.rf_sink_ready           (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (uart_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (uart_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (uart_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) clock_crossing_io_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                                //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                   //       clk_reset.reset
		.m0_address              (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_014_src_ready),                                                                //              cp.ready
		.cp_valid                (cmd_xbar_mux_014_src_valid),                                                                //                .valid
		.cp_data                 (cmd_xbar_mux_014_src_data),                                                                 //                .data
		.cp_startofpacket        (cmd_xbar_mux_014_src_startofpacket),                                                        //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_014_src_endofpacket),                                                          //                .endofpacket
		.cp_channel              (cmd_xbar_mux_014_src_channel),                                                              //                .channel
		.rf_sink_ready           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponserequest (),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (289),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                                //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_data           (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                     // (terminated)
		.csr_read          (1'b0),                                                                                      // (terminated)
		.csr_write         (1'b0),                                                                                      // (terminated)
		.csr_readdata      (),                                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                      // (terminated)
		.almost_full_data  (),                                                                                          // (terminated)
		.almost_empty_data (),                                                                                          // (terminated)
		.in_empty          (1'b0),                                                                                      // (terminated)
		.out_empty         (),                                                                                          // (terminated)
		.in_error          (1'b0),                                                                                      // (terminated)
		.out_error         (),                                                                                          // (terminated)
		.in_channel        (1'b0),                                                                                      // (terminated)
		.out_channel       ()                                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tse_control_port_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                               //       clk_reset.reset
		.m0_address              (tse_control_port_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tse_control_port_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tse_control_port_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tse_control_port_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tse_control_port_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tse_control_port_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tse_control_port_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (tse_control_port_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tse_control_port_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (tse_control_port_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (tse_control_port_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tse_control_port_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (tse_control_port_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (tse_control_port_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (tse_control_port_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_015_src_ready),                                                            //              cp.ready
		.cp_valid                (cmd_xbar_mux_015_src_valid),                                                            //                .valid
		.cp_data                 (cmd_xbar_mux_015_src_data),                                                             //                .data
		.cp_startofpacket        (cmd_xbar_mux_015_src_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_015_src_endofpacket),                                                      //                .endofpacket
		.cp_channel              (cmd_xbar_mux_015_src_channel),                                                          //                .channel
		.rf_sink_ready           (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tse_control_port_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                 //     (terminated)
		.m0_writeresponserequest (),                                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_data           (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tse_control_port_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tse_control_port_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_016_src_ready),                                                        //              cp.ready
		.cp_valid                (cmd_xbar_mux_016_src_valid),                                                        //                .valid
		.cp_data                 (cmd_xbar_mux_016_src_data),                                                         //                .data
		.cp_startofpacket        (cmd_xbar_mux_016_src_startofpacket),                                                //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_016_src_endofpacket),                                                  //                .endofpacket
		.cp_channel              (cmd_xbar_mux_016_src_channel),                                                      //                .channel
		.rf_sink_ready           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_017_src_ready),                                                        //              cp.ready
		.cp_valid                (cmd_xbar_mux_017_src_valid),                                                        //                .valid
		.cp_data                 (cmd_xbar_mux_017_src_data),                                                         //                .data
		.cp_startofpacket        (cmd_xbar_mux_017_src_startofpacket),                                                //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_017_src_endofpacket),                                                  //                .endofpacket
		.cp_channel              (cmd_xbar_mux_017_src_channel),                                                      //                .channel
		.rf_sink_ready           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (93),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) descriptor_memory_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_c0_clk),                                                                                //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                                   //       clk_reset.reset
		.m0_address              (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_018_src_ready),                                                                //              cp.ready
		.cp_valid                (cmd_xbar_mux_018_src_valid),                                                                //                .valid
		.cp_data                 (cmd_xbar_mux_018_src_data),                                                                 //                .data
		.cp_startofpacket        (cmd_xbar_mux_018_src_startofpacket),                                                        //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_018_src_endofpacket),                                                          //                .endofpacket
		.cp_channel              (cmd_xbar_mux_018_src_channel),                                                              //                .channel
		.rf_sink_ready           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponserequest (),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_c0_clk),                                                                                //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_data           (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                     // (terminated)
		.csr_read          (1'b0),                                                                                      // (terminated)
		.csr_write         (1'b0),                                                                                      // (terminated)
		.csr_readdata      (),                                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                      // (terminated)
		.almost_full_data  (),                                                                                          // (terminated)
		.almost_empty_data (),                                                                                          // (terminated)
		.in_empty          (1'b0),                                                                                      // (terminated)
		.out_empty         (),                                                                                          // (terminated)
		.in_error          (1'b0),                                                                                      // (terminated)
		.out_error         (),                                                                                          // (terminated)
		.in_channel        (1'b0),                                                                                      // (terminated)
		.out_channel       ()                                                                                           // (terminated)
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                         //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                              //       src.ready
		.src_valid          (addr_router_src_valid),                                                              //          .valid
		.src_data           (addr_router_src_data),                                                               //          .data
		.src_channel        (addr_router_src_channel),                                                            //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                         //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_001 addr_router_001 (
		.sink_ready         (cpu_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                  //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                   //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                   //          .valid
		.src_data           (addr_router_001_src_data),                                                    //          .data
		.src_channel        (addr_router_001_src_channel),                                                 //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                              //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_002 addr_router_002 (
		.sink_ready         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                            //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                            //          .valid
		.src_data           (addr_router_002_src_data),                                                             //          .data
		.src_channel        (addr_router_002_src_channel),                                                          //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                       //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_002 addr_router_003 (
		.sink_ready         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                            //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                                             //       src.ready
		.src_valid          (addr_router_003_src_valid),                                                             //          .valid
		.src_data           (addr_router_003_src_data),                                                              //          .data
		.src_channel        (addr_router_003_src_channel),                                                           //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                                        //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_002 addr_router_004 (
		.sink_ready         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready          (addr_router_004_src_ready),                                                            //       src.ready
		.src_valid          (addr_router_004_src_valid),                                                            //          .valid
		.src_data           (addr_router_004_src_data),                                                             //          .data
		.src_channel        (addr_router_004_src_channel),                                                          //          .channel
		.src_startofpacket  (addr_router_004_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (addr_router_004_src_endofpacket)                                                       //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_002 addr_router_005 (
		.sink_ready         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                            //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.src_ready          (addr_router_005_src_ready),                                                             //       src.ready
		.src_valid          (addr_router_005_src_valid),                                                             //          .valid
		.src_data           (addr_router_005_src_data),                                                              //          .data
		.src_channel        (addr_router_005_src_channel),                                                           //          .channel
		.src_startofpacket  (addr_router_005_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (addr_router_005_src_endofpacket)                                                        //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_006 addr_router_006 (
		.sink_ready         (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                   //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (addr_router_006_src_ready),                                                    //       src.ready
		.src_valid          (addr_router_006_src_valid),                                                    //          .valid
		.src_data           (addr_router_006_src_data),                                                     //          .data
		.src_channel        (addr_router_006_src_channel),                                                  //          .channel
		.src_startofpacket  (addr_router_006_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (addr_router_006_src_endofpacket)                                               //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_addr_router_006 addr_router_007 (
		.sink_ready         (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                  //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (addr_router_007_src_ready),                                                   //       src.ready
		.src_valid          (addr_router_007_src_valid),                                                   //          .valid
		.src_data           (addr_router_007_src_data),                                                    //          .data
		.src_channel        (addr_router_007_src_channel),                                                 //          .channel
		.src_startofpacket  (addr_router_007_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (addr_router_007_src_endofpacket)                                              //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router id_router (
		.sink_ready         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                       //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                              //       src.ready
		.src_valid          (id_router_src_valid),                                                              //          .valid
		.src_data           (id_router_src_data),                                                               //          .data
		.src_channel        (id_router_src_channel),                                                            //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                         //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                          //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                             //       src.ready
		.src_valid          (id_router_001_src_valid),                                             //          .valid
		.src_data           (id_router_001_src_data),                                              //          .data
		.src_channel        (id_router_001_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                        //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                   //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                      //       src.ready
		.src_valid          (id_router_002_src_valid),                                                      //          .valid
		.src_data           (id_router_002_src_data),                                                       //          .data
		.src_channel        (id_router_002_src_channel),                                                    //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                 //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router id_router_003 (
		.sink_ready         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                   //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                      //       src.ready
		.src_valid          (id_router_003_src_valid),                                                      //          .valid
		.src_data           (id_router_003_src_data),                                                       //          .data
		.src_channel        (id_router_003_src_channel),                                                    //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                                 //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_004 id_router_004 (
		.sink_ready         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cfi_flash_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                               //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                                  //       src.ready
		.src_valid          (id_router_004_src_valid),                                                  //          .valid
		.src_data           (id_router_004_src_data),                                                   //          .data
		.src_channel        (id_router_004_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                             //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_005 (
		.sink_ready         (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sma_in_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                              //       src.ready
		.src_valid          (id_router_005_src_valid),                                              //          .valid
		.src_data           (id_router_005_src_data),                                               //          .data
		.src_channel        (id_router_005_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                         //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_006 (
		.sink_ready         (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sma_out_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                            //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                               //       src.ready
		.src_valid          (id_router_006_src_valid),                                               //          .valid
		.src_data           (id_router_006_src_data),                                                //          .data
		.src_channel        (id_router_006_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                          //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_007 (
		.sink_ready         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_avalon_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                    //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                                       //       src.ready
		.src_valid          (id_router_007_src_valid),                                                       //          .valid
		.src_data           (id_router_007_src_data),                                                        //          .data
		.src_channel        (id_router_007_src_channel),                                                     //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                                  //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_008 (
		.sink_ready         (usb_hc_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (usb_hc_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (usb_hc_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (usb_hc_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (usb_hc_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                           //       src.ready
		.src_valid          (id_router_008_src_valid),                                           //          .valid
		.src_data           (id_router_008_src_data),                                            //          .data
		.src_channel        (id_router_008_src_channel),                                         //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_009 (
		.sink_ready         (usb_dc_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (usb_dc_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (usb_dc_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (usb_dc_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (usb_dc_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_009_src_ready),                                           //       src.ready
		.src_valid          (id_router_009_src_valid),                                           //          .valid
		.src_data           (id_router_009_src_data),                                            //          .data
		.src_channel        (id_router_009_src_channel),                                         //          .channel
		.src_startofpacket  (id_router_009_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (id_router_009_src_endofpacket)                                      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_010 (
		.sink_ready         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vic_0_csr_access_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                  //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (id_router_010_src_ready),                                                     //       src.ready
		.src_valid          (id_router_010_src_valid),                                                     //          .valid
		.src_data           (id_router_010_src_data),                                                      //          .data
		.src_channel        (id_router_010_src_channel),                                                   //          .channel
		.src_startofpacket  (id_router_010_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (id_router_010_src_endofpacket)                                                //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_011 id_router_011 (
		.sink_ready         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (can_top_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                                      //       clk.clk
		.reset              (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_011_src_ready),                                                             //       src.ready
		.src_valid          (id_router_011_src_valid),                                                             //          .valid
		.src_data           (id_router_011_src_data),                                                              //          .data
		.src_channel        (id_router_011_src_channel),                                                           //          .channel
		.src_startofpacket  (id_router_011_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket    (id_router_011_src_endofpacket)                                                        //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_012 (
		.sink_ready         (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (uart_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_012_src_ready),                                              //       src.ready
		.src_valid          (id_router_012_src_valid),                                              //          .valid
		.src_data           (id_router_012_src_data),                                               //          .data
		.src_channel        (id_router_012_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_012_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_012_src_endofpacket)                                         //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_013 (
		.sink_ready         (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (uart_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_013_src_ready),                                              //       src.ready
		.src_valid          (id_router_013_src_valid),                                              //          .valid
		.src_data           (id_router_013_src_data),                                               //          .data
		.src_channel        (id_router_013_src_channel),                                            //          .channel
		.src_startofpacket  (id_router_013_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (id_router_013_src_endofpacket)                                         //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_014 (
		.sink_ready         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (clock_crossing_io_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready          (id_router_014_src_ready),                                                         //       src.ready
		.src_valid          (id_router_014_src_valid),                                                         //          .valid
		.src_data           (id_router_014_src_data),                                                          //          .data
		.src_channel        (id_router_014_src_channel),                                                       //          .channel
		.src_startofpacket  (id_router_014_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (id_router_014_src_endofpacket)                                                    //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_015 (
		.sink_ready         (tse_control_port_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (tse_control_port_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (tse_control_port_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (tse_control_port_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tse_control_port_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                  //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (id_router_015_src_ready),                                                     //       src.ready
		.src_valid          (id_router_015_src_valid),                                                     //          .valid
		.src_data           (id_router_015_src_data),                                                      //          .data
		.src_channel        (id_router_015_src_channel),                                                   //          .channel
		.src_startofpacket  (id_router_015_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (id_router_015_src_endofpacket)                                                //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_016 (
		.sink_ready         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_016_src_ready),                                                 //       src.ready
		.src_valid          (id_router_016_src_valid),                                                 //          .valid
		.src_data           (id_router_016_src_data),                                                  //          .data
		.src_channel        (id_router_016_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_016_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_016_src_endofpacket)                                            //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_005 id_router_017 (
		.sink_ready         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_017_src_ready),                                                 //       src.ready
		.src_valid          (id_router_017_src_valid),                                                 //          .valid
		.src_data           (id_router_017_src_data),                                                  //          .data
		.src_channel        (id_router_017_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_017_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_017_src_endofpacket)                                            //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_id_router_018 id_router_018 (
		.sink_ready         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (descriptor_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_c0_clk),                                                                      //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready          (id_router_018_src_ready),                                                         //       src.ready
		.src_valid          (id_router_018_src_valid),                                                         //          .valid
		.src_data           (id_router_018_src_data),                                                          //          .data
		.src_channel        (id_router_018_src_channel),                                                       //          .channel
		.src_startofpacket  (id_router_018_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (id_router_018_src_endofpacket)                                                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (95),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (pll_c0_clk),                              //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                   //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                   //          .valid
		.cmd_sink_data          (addr_router_src_data),                    //          .data
		.cmd_sink_channel       (addr_router_src_channel),                 //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),           //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),             //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                   //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                    //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                 //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),           //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),             //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                  //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                   //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),            //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                   //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                   //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                    //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                 //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),           //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),             //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                   // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31)
	) burst_adapter (
		.clk                   (pll_c0_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_source0_data),              //          .data
		.source0_channel       (burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31)
	) burst_adapter_001 (
		.clk                   (pll_c0_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),              //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),          //          .data
		.source0_channel       (burst_adapter_001_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (61),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (62),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (67),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31)
	) burst_adapter_002 (
		.clk                   (pll_c0_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_002_src_valid),             //     sink0.valid
		.sink0_data            (width_adapter_002_src_data),              //          .data
		.sink0_channel         (width_adapter_002_src_channel),           //          .channel
		.sink0_startofpacket   (width_adapter_002_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (width_adapter_002_src_endofpacket),       //          .endofpacket
		.sink0_ready           (width_adapter_002_src_ready),             //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),          //          .data
		.source0_channel       (burst_adapter_002_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (93),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (85),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31)
	) burst_adapter_003 (
		.clk                   (pll_c0_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_003_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_003_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_003_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_003_src_ready),              //          .ready
		.source0_valid         (burst_adapter_003_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_003_source0_data),          //          .data
		.source0_channel       (burst_adapter_003_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_003_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_003_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_003_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (66),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (53),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (91),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (58),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31)
	) burst_adapter_004 (
		.clk                   (pll_c0_clk),                              //       cr0.clk
		.reset                 (cpu_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_003_src_valid),             //     sink0.valid
		.sink0_data            (width_adapter_003_src_data),              //          .data
		.sink0_channel         (width_adapter_003_src_channel),           //          .channel
		.sink0_startofpacket   (width_adapter_003_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (width_adapter_003_src_endofpacket),       //          .endofpacket
		.sink0_ready           (width_adapter_003_src_ready),             //          .ready
		.source0_valid         (burst_adapter_004_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_004_source0_data),          //          .data
		.source0_channel       (burst_adapter_004_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_004_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_004_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_004_source0_ready)          //          .ready
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (pll_c0_clk),                              //        clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                   //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                 //           .channel
		.sink_data          (limiter_cmd_src_data),                    //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),           //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),             //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                  // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),               //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),               //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),             //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),       //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),         //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),               //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),               //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),             //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),       //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),         //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),               //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),               //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),             //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),       //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket),         //           .endofpacket
		.src3_ready         (cmd_xbar_demux_src3_ready),               //       src3.ready
		.src3_valid         (cmd_xbar_demux_src3_valid),               //           .valid
		.src3_data          (cmd_xbar_demux_src3_data),                //           .data
		.src3_channel       (cmd_xbar_demux_src3_channel),             //           .channel
		.src3_startofpacket (cmd_xbar_demux_src3_startofpacket),       //           .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_src3_endofpacket),         //           .endofpacket
		.src4_ready         (cmd_xbar_demux_src4_ready),               //       src4.ready
		.src4_valid         (cmd_xbar_demux_src4_valid),               //           .valid
		.src4_data          (cmd_xbar_demux_src4_data),                //           .data
		.src4_channel       (cmd_xbar_demux_src4_channel),             //           .channel
		.src4_startofpacket (cmd_xbar_demux_src4_startofpacket),       //           .startofpacket
		.src4_endofpacket   (cmd_xbar_demux_src4_endofpacket)          //           .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (addr_router_001_src_ready),               //      sink.ready
		.sink_channel        (addr_router_001_src_channel),             //          .channel
		.sink_data           (addr_router_001_src_data),                //          .data
		.sink_startofpacket  (addr_router_001_src_startofpacket),       //          .startofpacket
		.sink_endofpacket    (addr_router_001_src_endofpacket),         //          .endofpacket
		.sink_valid          (addr_router_001_src_valid),               //          .valid
		.src0_ready          (cmd_xbar_demux_001_src0_ready),           //      src0.ready
		.src0_valid          (cmd_xbar_demux_001_src0_valid),           //          .valid
		.src0_data           (cmd_xbar_demux_001_src0_data),            //          .data
		.src0_channel        (cmd_xbar_demux_001_src0_channel),         //          .channel
		.src0_startofpacket  (cmd_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.src1_ready          (cmd_xbar_demux_001_src1_ready),           //      src1.ready
		.src1_valid          (cmd_xbar_demux_001_src1_valid),           //          .valid
		.src1_data           (cmd_xbar_demux_001_src1_data),            //          .data
		.src1_channel        (cmd_xbar_demux_001_src1_channel),         //          .channel
		.src1_startofpacket  (cmd_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.src2_ready          (cmd_xbar_demux_001_src2_ready),           //      src2.ready
		.src2_valid          (cmd_xbar_demux_001_src2_valid),           //          .valid
		.src2_data           (cmd_xbar_demux_001_src2_data),            //          .data
		.src2_channel        (cmd_xbar_demux_001_src2_channel),         //          .channel
		.src2_startofpacket  (cmd_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_001_src2_endofpacket),     //          .endofpacket
		.src3_ready          (cmd_xbar_demux_001_src3_ready),           //      src3.ready
		.src3_valid          (cmd_xbar_demux_001_src3_valid),           //          .valid
		.src3_data           (cmd_xbar_demux_001_src3_data),            //          .data
		.src3_channel        (cmd_xbar_demux_001_src3_channel),         //          .channel
		.src3_startofpacket  (cmd_xbar_demux_001_src3_startofpacket),   //          .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_001_src3_endofpacket),     //          .endofpacket
		.src4_ready          (cmd_xbar_demux_001_src4_ready),           //      src4.ready
		.src4_valid          (cmd_xbar_demux_001_src4_valid),           //          .valid
		.src4_data           (cmd_xbar_demux_001_src4_data),            //          .data
		.src4_channel        (cmd_xbar_demux_001_src4_channel),         //          .channel
		.src4_startofpacket  (cmd_xbar_demux_001_src4_startofpacket),   //          .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_001_src4_endofpacket),     //          .endofpacket
		.src5_ready          (cmd_xbar_demux_001_src5_ready),           //      src5.ready
		.src5_valid          (cmd_xbar_demux_001_src5_valid),           //          .valid
		.src5_data           (cmd_xbar_demux_001_src5_data),            //          .data
		.src5_channel        (cmd_xbar_demux_001_src5_channel),         //          .channel
		.src5_startofpacket  (cmd_xbar_demux_001_src5_startofpacket),   //          .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_001_src5_endofpacket),     //          .endofpacket
		.src6_ready          (cmd_xbar_demux_001_src6_ready),           //      src6.ready
		.src6_valid          (cmd_xbar_demux_001_src6_valid),           //          .valid
		.src6_data           (cmd_xbar_demux_001_src6_data),            //          .data
		.src6_channel        (cmd_xbar_demux_001_src6_channel),         //          .channel
		.src6_startofpacket  (cmd_xbar_demux_001_src6_startofpacket),   //          .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_001_src6_endofpacket),     //          .endofpacket
		.src7_ready          (cmd_xbar_demux_001_src7_ready),           //      src7.ready
		.src7_valid          (cmd_xbar_demux_001_src7_valid),           //          .valid
		.src7_data           (cmd_xbar_demux_001_src7_data),            //          .data
		.src7_channel        (cmd_xbar_demux_001_src7_channel),         //          .channel
		.src7_startofpacket  (cmd_xbar_demux_001_src7_startofpacket),   //          .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_001_src7_endofpacket),     //          .endofpacket
		.src8_ready          (cmd_xbar_demux_001_src8_ready),           //      src8.ready
		.src8_valid          (cmd_xbar_demux_001_src8_valid),           //          .valid
		.src8_data           (cmd_xbar_demux_001_src8_data),            //          .data
		.src8_channel        (cmd_xbar_demux_001_src8_channel),         //          .channel
		.src8_startofpacket  (cmd_xbar_demux_001_src8_startofpacket),   //          .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_001_src8_endofpacket),     //          .endofpacket
		.src9_ready          (cmd_xbar_demux_001_src9_ready),           //      src9.ready
		.src9_valid          (cmd_xbar_demux_001_src9_valid),           //          .valid
		.src9_data           (cmd_xbar_demux_001_src9_data),            //          .data
		.src9_channel        (cmd_xbar_demux_001_src9_channel),         //          .channel
		.src9_startofpacket  (cmd_xbar_demux_001_src9_startofpacket),   //          .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_001_src9_endofpacket),     //          .endofpacket
		.src10_ready         (cmd_xbar_demux_001_src10_ready),          //     src10.ready
		.src10_valid         (cmd_xbar_demux_001_src10_valid),          //          .valid
		.src10_data          (cmd_xbar_demux_001_src10_data),           //          .data
		.src10_channel       (cmd_xbar_demux_001_src10_channel),        //          .channel
		.src10_startofpacket (cmd_xbar_demux_001_src10_startofpacket),  //          .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_001_src10_endofpacket),    //          .endofpacket
		.src11_ready         (cmd_xbar_demux_001_src11_ready),          //     src11.ready
		.src11_valid         (cmd_xbar_demux_001_src11_valid),          //          .valid
		.src11_data          (cmd_xbar_demux_001_src11_data),           //          .data
		.src11_channel       (cmd_xbar_demux_001_src11_channel),        //          .channel
		.src11_startofpacket (cmd_xbar_demux_001_src11_startofpacket),  //          .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_001_src11_endofpacket),    //          .endofpacket
		.src12_ready         (cmd_xbar_demux_001_src12_ready),          //     src12.ready
		.src12_valid         (cmd_xbar_demux_001_src12_valid),          //          .valid
		.src12_data          (cmd_xbar_demux_001_src12_data),           //          .data
		.src12_channel       (cmd_xbar_demux_001_src12_channel),        //          .channel
		.src12_startofpacket (cmd_xbar_demux_001_src12_startofpacket),  //          .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_001_src12_endofpacket),    //          .endofpacket
		.src13_ready         (cmd_xbar_demux_001_src13_ready),          //     src13.ready
		.src13_valid         (cmd_xbar_demux_001_src13_valid),          //          .valid
		.src13_data          (cmd_xbar_demux_001_src13_data),           //          .data
		.src13_channel       (cmd_xbar_demux_001_src13_channel),        //          .channel
		.src13_startofpacket (cmd_xbar_demux_001_src13_startofpacket),  //          .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_001_src13_endofpacket),    //          .endofpacket
		.src14_ready         (cmd_xbar_demux_001_src14_ready),          //     src14.ready
		.src14_valid         (cmd_xbar_demux_001_src14_valid),          //          .valid
		.src14_data          (cmd_xbar_demux_001_src14_data),           //          .data
		.src14_channel       (cmd_xbar_demux_001_src14_channel),        //          .channel
		.src14_startofpacket (cmd_xbar_demux_001_src14_startofpacket),  //          .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_001_src14_endofpacket),    //          .endofpacket
		.src15_ready         (cmd_xbar_demux_001_src15_ready),          //     src15.ready
		.src15_valid         (cmd_xbar_demux_001_src15_valid),          //          .valid
		.src15_data          (cmd_xbar_demux_001_src15_data),           //          .data
		.src15_channel       (cmd_xbar_demux_001_src15_channel),        //          .channel
		.src15_startofpacket (cmd_xbar_demux_001_src15_startofpacket),  //          .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_001_src15_endofpacket),    //          .endofpacket
		.src16_ready         (cmd_xbar_demux_001_src16_ready),          //     src16.ready
		.src16_valid         (cmd_xbar_demux_001_src16_valid),          //          .valid
		.src16_data          (cmd_xbar_demux_001_src16_data),           //          .data
		.src16_channel       (cmd_xbar_demux_001_src16_channel),        //          .channel
		.src16_startofpacket (cmd_xbar_demux_001_src16_startofpacket),  //          .startofpacket
		.src16_endofpacket   (cmd_xbar_demux_001_src16_endofpacket),    //          .endofpacket
		.src17_ready         (cmd_xbar_demux_001_src17_ready),          //     src17.ready
		.src17_valid         (cmd_xbar_demux_001_src17_valid),          //          .valid
		.src17_data          (cmd_xbar_demux_001_src17_data),           //          .data
		.src17_channel       (cmd_xbar_demux_001_src17_channel),        //          .channel
		.src17_startofpacket (cmd_xbar_demux_001_src17_startofpacket),  //          .startofpacket
		.src17_endofpacket   (cmd_xbar_demux_001_src17_endofpacket),    //          .endofpacket
		.src18_ready         (cmd_xbar_demux_001_src18_ready),          //     src18.ready
		.src18_valid         (cmd_xbar_demux_001_src18_valid),          //          .valid
		.src18_data          (cmd_xbar_demux_001_src18_data),           //          .data
		.src18_channel       (cmd_xbar_demux_001_src18_channel),        //          .channel
		.src18_startofpacket (cmd_xbar_demux_001_src18_startofpacket),  //          .startofpacket
		.src18_endofpacket   (cmd_xbar_demux_001_src18_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),               //      sink.ready
		.sink_channel       (addr_router_002_src_channel),             //          .channel
		.sink_data          (addr_router_002_src_data),                //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_003 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_003_src_ready),               //      sink.ready
		.sink_channel       (addr_router_003_src_channel),             //          .channel
		.sink_data          (addr_router_003_src_data),                //          .data
		.sink_startofpacket (addr_router_003_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_003_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_003_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_003_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_003_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_003_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_003_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_003_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_004 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_004_src_ready),               //      sink.ready
		.sink_channel       (addr_router_004_src_channel),             //          .channel
		.sink_data          (addr_router_004_src_data),                //          .data
		.sink_startofpacket (addr_router_004_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_004_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_004_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_004_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_004_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_004_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_004_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_004_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_004_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_005 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_005_src_ready),               //      sink.ready
		.sink_channel       (addr_router_005_src_channel),             //          .channel
		.sink_data          (addr_router_005_src_data),                //          .data
		.sink_startofpacket (addr_router_005_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_005_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_005_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_005_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_005_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_005_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_005_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_005_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_005_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_006 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_006_src_ready),               //      sink.ready
		.sink_channel       (addr_router_006_src_channel),             //          .channel
		.sink_data          (addr_router_006_src_data),                //          .data
		.sink_startofpacket (addr_router_006_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_006_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_006_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_006_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_006_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_006_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_006_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_006_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_006_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_007 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_007_src_ready),               //      sink.ready
		.sink_channel       (addr_router_007_src_channel),             //          .channel
		.sink_data          (addr_router_007_src_data),                //          .data
		.sink_startofpacket (addr_router_007_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (addr_router_007_src_endofpacket),         //          .endofpacket
		.sink_valid         (addr_router_007_src_valid),               //          .valid
		.src0_ready         (cmd_xbar_demux_007_src0_ready),           //      src0.ready
		.src0_valid         (cmd_xbar_demux_007_src0_valid),           //          .valid
		.src0_data          (cmd_xbar_demux_007_src0_data),            //          .data
		.src0_channel       (cmd_xbar_demux_007_src0_channel),         //          .channel
		.src0_startofpacket (cmd_xbar_demux_007_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_007_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_001 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_006_src0_ready),           //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_006_src0_valid),           //          .valid
		.sink2_channel       (cmd_xbar_demux_006_src0_channel),         //          .channel
		.sink2_data          (cmd_xbar_demux_006_src0_data),            //          .data
		.sink2_startofpacket (cmd_xbar_demux_006_src0_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_006_src0_endofpacket),     //          .endofpacket
		.sink3_ready         (cmd_xbar_demux_007_src0_ready),           //     sink3.ready
		.sink3_valid         (cmd_xbar_demux_007_src0_valid),           //          .valid
		.sink3_channel       (cmd_xbar_demux_007_src0_channel),         //          .channel
		.sink3_data          (cmd_xbar_demux_007_src0_data),            //          .data
		.sink3_startofpacket (cmd_xbar_demux_007_src0_startofpacket),   //          .startofpacket
		.sink3_endofpacket   (cmd_xbar_demux_007_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_003 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src3_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src3_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src3_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src3_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src3_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src4_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src4_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src4_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src4_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src4_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src4_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_005 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src5_ready),           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src5_valid),           //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src5_channel),         //          .channel
		.sink0_data          (cmd_xbar_demux_001_src5_data),            //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src5_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src5_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_006 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src6_ready),           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src6_valid),           //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src6_channel),         //          .channel
		.sink0_data          (cmd_xbar_demux_001_src6_data),            //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src6_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src6_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_007 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src7_ready),           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src7_valid),           //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src7_channel),         //          .channel
		.sink0_data          (cmd_xbar_demux_001_src7_data),            //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src7_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src7_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_008 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src8_ready),           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src8_valid),           //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src8_channel),         //          .channel
		.sink0_data          (cmd_xbar_demux_001_src8_data),            //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src8_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src8_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_009 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_009_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_009_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_009_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_009_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_009_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_009_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src9_ready),           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src9_valid),           //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src9_channel),         //          .channel
		.sink0_data          (cmd_xbar_demux_001_src9_data),            //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src9_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src9_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_010 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_010_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_010_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_010_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_010_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_010_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_010_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src10_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src10_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src10_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src10_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src10_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src10_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_011 cmd_xbar_mux_011 (
		.clk                 (clk_50_clk_clk),                                         //       clk.clk
		.reset               (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_xbar_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_xbar_mux_011_src_data),                              //          .data
		.src_channel         (cmd_xbar_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_xbar_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                      //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                      //          .valid
		.sink0_channel       (crosser_out_channel),                                    //          .channel
		.sink0_data          (crosser_out_data),                                       //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                 //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_012 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_012_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_012_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_012_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_012_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_012_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_012_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src12_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src12_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src12_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src12_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src12_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src12_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_013 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_013_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_013_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_013_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_013_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_013_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_013_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src13_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src13_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src13_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src13_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src13_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src13_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_014 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_014_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_014_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_014_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_014_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_014_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_014_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src14_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src14_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src14_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src14_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src14_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src14_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_015 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_015_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_015_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_015_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_015_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_015_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_015_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src15_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src15_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src15_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src15_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src15_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src15_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_016 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_016_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_016_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_016_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_016_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_016_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_016_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src16_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src16_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src16_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src16_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src16_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src16_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_005 cmd_xbar_mux_017 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_017_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_017_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_017_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_017_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_017_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_017_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src17_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src17_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src17_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src17_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src17_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src17_endofpacket)     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_mux_018 cmd_xbar_mux_018 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_018_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_018_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_018_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_018_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_018_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_018_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src18_ready),          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src18_valid),          //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src18_channel),        //          .channel
		.sink0_data          (cmd_xbar_demux_001_src18_data),           //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src18_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src18_endofpacket),    //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_002_src0_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_002_src0_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_002_src0_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_002_src0_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_003_src0_ready),           //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_003_src0_valid),           //          .valid
		.sink2_channel       (cmd_xbar_demux_003_src0_channel),         //          .channel
		.sink2_data          (cmd_xbar_demux_003_src0_data),            //          .data
		.sink2_startofpacket (cmd_xbar_demux_003_src0_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_003_src0_endofpacket),     //          .endofpacket
		.sink3_ready         (cmd_xbar_demux_004_src0_ready),           //     sink3.ready
		.sink3_valid         (cmd_xbar_demux_004_src0_valid),           //          .valid
		.sink3_channel       (cmd_xbar_demux_004_src0_channel),         //          .channel
		.sink3_data          (cmd_xbar_demux_004_src0_data),            //          .data
		.sink3_startofpacket (cmd_xbar_demux_004_src0_startofpacket),   //          .startofpacket
		.sink3_endofpacket   (cmd_xbar_demux_004_src0_endofpacket),     //          .endofpacket
		.sink4_ready         (cmd_xbar_demux_005_src0_ready),           //     sink4.ready
		.sink4_valid         (cmd_xbar_demux_005_src0_valid),           //          .valid
		.sink4_channel       (cmd_xbar_demux_005_src0_channel),         //          .channel
		.sink4_data          (cmd_xbar_demux_005_src0_data),            //          .data
		.sink4_startofpacket (cmd_xbar_demux_005_src0_startofpacket),   //          .startofpacket
		.sink4_endofpacket   (cmd_xbar_demux_005_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                     //      sink.ready
		.sink_channel       (id_router_src_channel),                   //          .channel
		.sink_data          (id_router_src_data),                      //          .data
		.sink_startofpacket (id_router_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)          //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux_001 rsp_xbar_demux_001 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                 //      sink.ready
		.sink_channel       (id_router_001_src_channel),               //          .channel
		.sink_data          (id_router_001_src_data),                  //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),           //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),           //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),            //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),         //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket),     //          .endofpacket
		.src3_ready         (rsp_xbar_demux_001_src3_ready),           //      src3.ready
		.src3_valid         (rsp_xbar_demux_001_src3_valid),           //          .valid
		.src3_data          (rsp_xbar_demux_001_src3_data),            //          .data
		.src3_channel       (rsp_xbar_demux_001_src3_channel),         //          .channel
		.src3_startofpacket (rsp_xbar_demux_001_src3_startofpacket),   //          .startofpacket
		.src3_endofpacket   (rsp_xbar_demux_001_src3_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                 //      sink.ready
		.sink_channel       (width_adapter_src_channel),               //          .channel
		.sink_data          (width_adapter_src_data),                  //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),           //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_003 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                 //      sink.ready
		.sink_channel       (id_router_003_src_channel),               //          .channel
		.sink_data          (id_router_003_src_data),                  //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_001_src_ready),             //      sink.ready
		.sink_channel       (width_adapter_001_src_channel),           //          .channel
		.sink_data          (width_adapter_001_src_data),              //          .data
		.sink_startofpacket (width_adapter_001_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (width_adapter_001_src_endofpacket),       //          .endofpacket
		.sink_valid         (width_adapter_001_src_valid),             //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_005 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                 //      sink.ready
		.sink_channel       (id_router_005_src_channel),               //          .channel
		.sink_data          (id_router_005_src_data),                  //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_006 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                 //      sink.ready
		.sink_channel       (id_router_006_src_channel),               //          .channel
		.sink_data          (id_router_006_src_data),                  //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_007 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                 //      sink.ready
		.sink_channel       (id_router_007_src_channel),               //          .channel
		.sink_data          (id_router_007_src_data),                  //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_008 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                 //      sink.ready
		.sink_channel       (id_router_008_src_channel),               //          .channel
		.sink_data          (id_router_008_src_data),                  //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_009 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_009_src_ready),                 //      sink.ready
		.sink_channel       (id_router_009_src_channel),               //          .channel
		.sink_data          (id_router_009_src_data),                  //          .data
		.sink_startofpacket (id_router_009_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_009_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_009_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_009_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_009_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_009_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_009_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_009_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_009_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_010 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_010_src_ready),                 //      sink.ready
		.sink_channel       (id_router_010_src_channel),               //          .channel
		.sink_data          (id_router_010_src_data),                  //          .data
		.sink_startofpacket (id_router_010_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_010_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_010_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_010_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_010_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_010_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_010_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_010_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_010_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux_011 rsp_xbar_demux_011 (
		.clk                (clk_50_clk_clk),                                         //       clk.clk
		.reset              (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_011_src_ready),                                //      sink.ready
		.sink_channel       (id_router_011_src_channel),                              //          .channel
		.sink_data          (id_router_011_src_data),                                 //          .data
		.sink_startofpacket (id_router_011_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (id_router_011_src_endofpacket),                          //          .endofpacket
		.sink_valid         (id_router_011_src_valid),                                //          .valid
		.src0_ready         (rsp_xbar_demux_011_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_xbar_demux_011_src0_valid),                          //          .valid
		.src0_data          (rsp_xbar_demux_011_src0_data),                           //          .data
		.src0_channel       (rsp_xbar_demux_011_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_xbar_demux_011_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_011_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_012 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_012_src_ready),                 //      sink.ready
		.sink_channel       (id_router_012_src_channel),               //          .channel
		.sink_data          (id_router_012_src_data),                  //          .data
		.sink_startofpacket (id_router_012_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_012_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_012_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_012_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_012_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_012_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_012_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_012_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_012_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_013 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_013_src_ready),                 //      sink.ready
		.sink_channel       (id_router_013_src_channel),               //          .channel
		.sink_data          (id_router_013_src_data),                  //          .data
		.sink_startofpacket (id_router_013_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_013_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_013_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_013_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_013_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_013_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_013_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_013_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_013_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_014 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_014_src_ready),                 //      sink.ready
		.sink_channel       (id_router_014_src_channel),               //          .channel
		.sink_data          (id_router_014_src_data),                  //          .data
		.sink_startofpacket (id_router_014_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_014_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_014_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_014_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_014_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_014_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_014_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_014_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_014_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_015 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_015_src_ready),                 //      sink.ready
		.sink_channel       (id_router_015_src_channel),               //          .channel
		.sink_data          (id_router_015_src_data),                  //          .data
		.sink_startofpacket (id_router_015_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_015_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_015_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_015_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_015_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_015_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_015_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_015_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_015_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_016 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_016_src_ready),                 //      sink.ready
		.sink_channel       (id_router_016_src_channel),               //          .channel
		.sink_data          (id_router_016_src_data),                  //          .data
		.sink_startofpacket (id_router_016_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_016_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_016_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_016_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_016_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_016_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_016_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_016_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_016_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_cmd_xbar_demux_002 rsp_xbar_demux_017 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_017_src_ready),                 //      sink.ready
		.sink_channel       (id_router_017_src_channel),               //          .channel
		.sink_data          (id_router_017_src_data),                  //          .data
		.sink_startofpacket (id_router_017_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_017_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_017_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_017_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_017_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_017_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_017_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_017_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_017_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_demux_018 rsp_xbar_demux_018 (
		.clk                (pll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_018_src_ready),                 //      sink.ready
		.sink_channel       (id_router_018_src_channel),               //          .channel
		.sink_data          (id_router_018_src_data),                  //          .data
		.sink_startofpacket (id_router_018_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_018_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_018_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_018_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_018_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_018_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_018_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_018_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_018_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_018_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_018_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_018_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_018_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_018_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_018_src1_endofpacket),     //          .endofpacket
		.src2_ready         (rsp_xbar_demux_018_src2_ready),           //      src2.ready
		.src2_valid         (rsp_xbar_demux_018_src2_valid),           //          .valid
		.src2_data          (rsp_xbar_demux_018_src2_data),            //          .data
		.src2_channel       (rsp_xbar_demux_018_src2_channel),         //          .channel
		.src2_startofpacket (rsp_xbar_demux_018_src2_startofpacket),   //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_018_src2_endofpacket),     //          .endofpacket
		.src3_ready         (rsp_xbar_demux_018_src3_ready),           //      src3.ready
		.src3_valid         (rsp_xbar_demux_018_src3_valid),           //          .valid
		.src3_data          (rsp_xbar_demux_018_src3_data),            //          .data
		.src3_channel       (rsp_xbar_demux_018_src3_channel),         //          .channel
		.src3_startofpacket (rsp_xbar_demux_018_src3_startofpacket),   //          .startofpacket
		.src3_endofpacket   (rsp_xbar_demux_018_src3_endofpacket),     //          .endofpacket
		.src4_ready         (rsp_xbar_demux_018_src4_ready),           //      src4.ready
		.src4_valid         (rsp_xbar_demux_018_src4_valid),           //          .valid
		.src4_data          (rsp_xbar_demux_018_src4_data),            //          .data
		.src4_channel       (rsp_xbar_demux_018_src4_channel),         //          .channel
		.src4_startofpacket (rsp_xbar_demux_018_src4_startofpacket),   //          .startofpacket
		.src4_endofpacket   (rsp_xbar_demux_018_src4_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                  //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                  //          .valid
		.src_data            (rsp_xbar_mux_src_data),                   //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),               //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),               //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),             //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),         //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),           //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),           //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),         //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),            //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),           //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),           //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),         //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),            //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_003_src0_ready),           //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_003_src0_valid),           //          .valid
		.sink3_channel       (rsp_xbar_demux_003_src0_channel),         //          .channel
		.sink3_data          (rsp_xbar_demux_003_src0_data),            //          .data
		.sink3_startofpacket (rsp_xbar_demux_003_src0_startofpacket),   //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),     //          .endofpacket
		.sink4_ready         (rsp_xbar_demux_004_src0_ready),           //     sink4.ready
		.sink4_valid         (rsp_xbar_demux_004_src0_valid),           //          .valid
		.sink4_channel       (rsp_xbar_demux_004_src0_channel),         //          .channel
		.sink4_data          (rsp_xbar_demux_004_src0_data),            //          .data
		.sink4_startofpacket (rsp_xbar_demux_004_src0_startofpacket),   //          .startofpacket
		.sink4_endofpacket   (rsp_xbar_demux_004_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_001 (
		.clk                  (pll_c0_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_001_src_ready),              //       src.ready
		.src_valid            (rsp_xbar_mux_001_src_valid),              //          .valid
		.src_data             (rsp_xbar_mux_001_src_data),               //          .data
		.src_channel          (rsp_xbar_mux_001_src_channel),            //          .channel
		.src_startofpacket    (rsp_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src1_ready),               //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src1_valid),               //          .valid
		.sink0_channel        (rsp_xbar_demux_src1_channel),             //          .channel
		.sink0_data           (rsp_xbar_demux_src1_data),                //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src1_startofpacket),       //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src1_endofpacket),         //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src1_ready),           //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src1_valid),           //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src1_channel),         //          .channel
		.sink1_data           (rsp_xbar_demux_001_src1_data),            //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src1_endofpacket),     //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src1_ready),           //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src1_valid),           //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src1_channel),         //          .channel
		.sink2_data           (rsp_xbar_demux_002_src1_data),            //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src1_endofpacket),     //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src1_ready),           //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src1_valid),           //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src1_channel),         //          .channel
		.sink3_data           (rsp_xbar_demux_003_src1_data),            //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src1_startofpacket),   //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src1_endofpacket),     //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src1_ready),           //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src1_valid),           //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src1_channel),         //          .channel
		.sink4_data           (rsp_xbar_demux_004_src1_data),            //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src1_startofpacket),   //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src1_endofpacket),     //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src0_ready),           //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src0_valid),           //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src0_channel),         //          .channel
		.sink5_data           (rsp_xbar_demux_005_src0_data),            //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src0_startofpacket),   //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src0_endofpacket),     //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src0_ready),           //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src0_valid),           //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src0_channel),         //          .channel
		.sink6_data           (rsp_xbar_demux_006_src0_data),            //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src0_startofpacket),   //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src0_endofpacket),     //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src0_ready),           //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src0_valid),           //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src0_channel),         //          .channel
		.sink7_data           (rsp_xbar_demux_007_src0_data),            //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src0_startofpacket),   //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src0_endofpacket),     //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src0_ready),           //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src0_valid),           //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src0_channel),         //          .channel
		.sink8_data           (rsp_xbar_demux_008_src0_data),            //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src0_startofpacket),   //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src0_endofpacket),     //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src0_ready),           //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src0_valid),           //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src0_channel),         //          .channel
		.sink9_data           (rsp_xbar_demux_009_src0_data),            //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src0_startofpacket),   //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src0_endofpacket),     //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src0_ready),           //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src0_valid),           //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src0_channel),         //          .channel
		.sink10_data          (rsp_xbar_demux_010_src0_data),            //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src0_startofpacket),   //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),     //          .endofpacket
		.sink11_ready         (crosser_001_out_ready),                   //    sink11.ready
		.sink11_valid         (crosser_001_out_valid),                   //          .valid
		.sink11_channel       (crosser_001_out_channel),                 //          .channel
		.sink11_data          (crosser_001_out_data),                    //          .data
		.sink11_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink11_endofpacket   (crosser_001_out_endofpacket),             //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src0_ready),           //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src0_valid),           //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src0_channel),         //          .channel
		.sink12_data          (rsp_xbar_demux_012_src0_data),            //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src0_startofpacket),   //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),     //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src0_ready),           //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src0_valid),           //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src0_channel),         //          .channel
		.sink13_data          (rsp_xbar_demux_013_src0_data),            //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src0_startofpacket),   //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),     //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src0_ready),           //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src0_valid),           //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src0_channel),         //          .channel
		.sink14_data          (rsp_xbar_demux_014_src0_data),            //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src0_startofpacket),   //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),     //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src0_ready),           //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src0_valid),           //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src0_channel),         //          .channel
		.sink15_data          (rsp_xbar_demux_015_src0_data),            //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src0_startofpacket),   //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),     //          .endofpacket
		.sink16_ready         (rsp_xbar_demux_016_src0_ready),           //    sink16.ready
		.sink16_valid         (rsp_xbar_demux_016_src0_valid),           //          .valid
		.sink16_channel       (rsp_xbar_demux_016_src0_channel),         //          .channel
		.sink16_data          (rsp_xbar_demux_016_src0_data),            //          .data
		.sink16_startofpacket (rsp_xbar_demux_016_src0_startofpacket),   //          .startofpacket
		.sink16_endofpacket   (rsp_xbar_demux_016_src0_endofpacket),     //          .endofpacket
		.sink17_ready         (rsp_xbar_demux_017_src0_ready),           //    sink17.ready
		.sink17_valid         (rsp_xbar_demux_017_src0_valid),           //          .valid
		.sink17_channel       (rsp_xbar_demux_017_src0_channel),         //          .channel
		.sink17_data          (rsp_xbar_demux_017_src0_data),            //          .data
		.sink17_startofpacket (rsp_xbar_demux_017_src0_startofpacket),   //          .startofpacket
		.sink17_endofpacket   (rsp_xbar_demux_017_src0_endofpacket),     //          .endofpacket
		.sink18_ready         (rsp_xbar_demux_018_src0_ready),           //    sink18.ready
		.sink18_valid         (rsp_xbar_demux_018_src0_valid),           //          .valid
		.sink18_channel       (rsp_xbar_demux_018_src0_channel),         //          .channel
		.sink18_data          (rsp_xbar_demux_018_src0_data),            //          .data
		.sink18_startofpacket (rsp_xbar_demux_018_src0_startofpacket),   //          .startofpacket
		.sink18_endofpacket   (rsp_xbar_demux_018_src0_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_002 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_018_src1_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_018_src1_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_018_src1_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_018_src1_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_018_src1_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_018_src1_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_003 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_003_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_003_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_003_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_003_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_018_src2_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_018_src2_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_018_src2_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_018_src2_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_018_src2_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_018_src2_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_004 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_004_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_004_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_004_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_004_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_018_src3_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_018_src3_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_018_src3_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_018_src3_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_018_src3_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_018_src3_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_005 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_005_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_005_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_005_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_005_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_005_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_005_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_018_src4_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_018_src4_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_018_src4_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_018_src4_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_018_src4_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_018_src4_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_006 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_006_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_006_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_006_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_006_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_006_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_006_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_001_src2_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_001_src2_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_001_src2_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_001_src2_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)      //          .endofpacket
	);

	DE2_115_SOPC_mm_interconnect_0_rsp_xbar_mux_002 rsp_xbar_mux_007 (
		.clk                 (pll_c0_clk),                              //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_007_src_ready),              //       src.ready
		.src_valid           (rsp_xbar_mux_007_src_valid),              //          .valid
		.src_data            (rsp_xbar_mux_007_src_data),               //          .data
		.src_channel         (rsp_xbar_mux_007_src_channel),            //          .channel
		.src_startofpacket   (rsp_xbar_mux_007_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_007_src_endofpacket),        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_001_src3_ready),           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_001_src3_valid),           //          .valid
		.sink0_channel       (rsp_xbar_demux_001_src3_channel),         //          .channel
		.sink0_data          (rsp_xbar_demux_001_src3_data),            //          .data
		.sink0_startofpacket (rsp_xbar_demux_001_src3_startofpacket),   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_001_src3_endofpacket)      //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (61),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (62),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (96),
		.IN_PKT_RESPONSE_STATUS_L      (95),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (97),
		.IN_PKT_ORI_BURST_SIZE_H       (99),
		.IN_ST_DATA_W                  (100),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (pll_c0_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_002_src_valid),                 //      sink.valid
		.in_channel           (id_router_002_src_channel),               //          .channel
		.in_startofpacket     (id_router_002_src_startofpacket),         //          .startofpacket
		.in_endofpacket       (id_router_002_src_endofpacket),           //          .endofpacket
		.in_ready             (id_router_002_src_ready),                 //          .ready
		.in_data              (id_router_002_src_data),                  //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),           //       src.endofpacket
		.out_data             (width_adapter_src_data),                  //          .data
		.out_channel          (width_adapter_src_channel),               //          .channel
		.out_valid            (width_adapter_src_valid),                 //          .valid
		.out_ready            (width_adapter_src_ready),                 //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (87),
		.IN_PKT_RESPONSE_STATUS_L      (86),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (88),
		.IN_PKT_ORI_BURST_SIZE_H       (90),
		.IN_ST_DATA_W                  (91),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (pll_c0_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_004_src_valid),                 //      sink.valid
		.in_channel           (id_router_004_src_channel),               //          .channel
		.in_startofpacket     (id_router_004_src_startofpacket),         //          .startofpacket
		.in_endofpacket       (id_router_004_src_endofpacket),           //          .endofpacket
		.in_ready             (id_router_004_src_ready),                 //          .ready
		.in_data              (id_router_004_src_data),                  //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),       //       src.endofpacket
		.out_data             (width_adapter_001_src_data),              //          .data
		.out_channel          (width_adapter_001_src_channel),           //          .channel
		.out_valid            (width_adapter_001_src_valid),             //          .valid
		.out_ready            (width_adapter_001_src_ready),             //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (61),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (96),
		.OUT_PKT_RESPONSE_STATUS_L     (95),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (97),
		.OUT_PKT_ORI_BURST_SIZE_H      (99),
		.OUT_ST_DATA_W                 (100),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_002 (
		.clk                  (pll_c0_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_002_src_valid),              //      sink.valid
		.in_channel           (cmd_xbar_mux_002_src_channel),            //          .channel
		.in_startofpacket     (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.in_ready             (cmd_xbar_mux_002_src_ready),              //          .ready
		.in_data              (cmd_xbar_mux_002_src_data),               //          .data
		.out_endofpacket      (width_adapter_002_src_endofpacket),       //       src.endofpacket
		.out_data             (width_adapter_002_src_data),              //          .data
		.out_channel          (width_adapter_002_src_channel),           //          .channel
		.out_valid            (width_adapter_002_src_valid),             //          .valid
		.out_ready            (width_adapter_002_src_ready),             //          .ready
		.out_startofpacket    (width_adapter_002_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (87),
		.OUT_PKT_RESPONSE_STATUS_L     (86),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (88),
		.OUT_PKT_ORI_BURST_SIZE_H      (90),
		.OUT_ST_DATA_W                 (91),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_003 (
		.clk                  (pll_c0_clk),                              //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_004_src_valid),              //      sink.valid
		.in_channel           (cmd_xbar_mux_004_src_channel),            //          .channel
		.in_startofpacket     (cmd_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.in_ready             (cmd_xbar_mux_004_src_ready),              //          .ready
		.in_data              (cmd_xbar_mux_004_src_data),               //          .data
		.out_endofpacket      (width_adapter_003_src_endofpacket),       //       src.endofpacket
		.out_data             (width_adapter_003_src_data),              //          .data
		.out_channel          (width_adapter_003_src_channel),           //          .channel
		.out_valid            (width_adapter_003_src_valid),             //          .valid
		.out_ready            (width_adapter_003_src_ready),             //          .ready
		.out_startofpacket    (width_adapter_003_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                   // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_c0_clk),                                             //        in_clk.clk
		.in_reset          (cpu_reset_n_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                         //       out_clk.clk
		.out_reset         (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_001_src11_ready),                         //            in.ready
		.in_valid          (cmd_xbar_demux_001_src11_valid),                         //              .valid
		.in_startofpacket  (cmd_xbar_demux_001_src11_startofpacket),                 //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_001_src11_endofpacket),                   //              .endofpacket
		.in_channel        (cmd_xbar_demux_001_src11_channel),                       //              .channel
		.in_data           (cmd_xbar_demux_001_src11_data),                          //              .data
		.out_ready         (crosser_out_ready),                                      //           out.ready
		.out_valid         (crosser_out_valid),                                      //              .valid
		.out_startofpacket (crosser_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_out_channel),                                    //              .channel
		.out_data          (crosser_out_data),                                       //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (118),
		.BITS_PER_SYMBOL     (118),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                         //        in_clk.clk
		.in_reset          (can_top_0_clock_sink_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_c0_clk),                                             //       out_clk.clk
		.out_reset         (cpu_reset_n_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_011_src0_ready),                          //            in.ready
		.in_valid          (rsp_xbar_demux_011_src0_valid),                          //              .valid
		.in_startofpacket  (rsp_xbar_demux_011_src0_startofpacket),                  //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_011_src0_endofpacket),                    //              .endofpacket
		.in_channel        (rsp_xbar_demux_011_src0_channel),                        //              .channel
		.in_data           (rsp_xbar_demux_011_src0_data),                           //              .data
		.out_ready         (crosser_001_out_ready),                                  //           out.ready
		.out_valid         (crosser_001_out_valid),                                  //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                //              .channel
		.out_data          (crosser_001_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

endmodule
